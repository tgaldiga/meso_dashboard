[
    {
        "id": "51164a2570c98448",
        "type": "tab",
        "label": "Meso Control Dashboard",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fc5cdac23d2176f1",
        "type": "tab",
        "label": "Meso Control Logic",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "188f3d12c338cf2e",
        "type": "tab",
        "label": "REST Access",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cbadd3392c768e8f",
        "type": "ui_tab",
        "name": "Meso Control Dashboard",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9cb27cd7662de036",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#24abff",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#24abff",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#24abff",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#70c8ff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#24abff",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Meso Control Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ba4217cd1248e741",
        "type": "ui_group",
        "name": "Meso Control",
        "tab": "cbadd3392c768e8f",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2a745e6b.07df92",
        "type": "ui_group",
        "name": "Default",
        "tab": "e63bce2d.68925",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "e63bce2d.68925",
        "type": "ui_tab",
        "name": "Denon",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d6bd552f7c1f0120",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.51.102",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "3cfcee9f07bdf583",
        "type": "chronos-config",
        "name": "chronos_config_1",
        "timezone": "",
        "sunPositions": []
    },
    {
        "id": "46220ce9c8d2b07d",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "10502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "8c25cdca95a4f35d",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "name": "V1",
        "label": "Main Valves",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "V1",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 890,
        "y": 340,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "ca802baf35ab3c2d",
        "type": "ui_slider",
        "z": "51164a2570c98448",
        "name": "TIDE_A",
        "label": "Tide",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 17,
        "width": 3,
        "height": 2,
        "passthru": true,
        "outs": "end",
        "topic": "TIDE_A",
        "topicType": "str",
        "min": 0,
        "max": "780",
        "step": 1,
        "className": "",
        "x": 900,
        "y": 540,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "d98048a9173c794f",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "name": "V3",
        "label": "Main Valves",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 12,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "V3",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 890,
        "y": 680,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "5c12e622defe1482",
        "type": "ui_text",
        "z": "51164a2570c98448",
        "group": "ba4217cd1248e741",
        "order": 7,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Tank A",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 890,
        "y": 300,
        "wires": []
    },
    {
        "id": "3741fec655bf92a8",
        "type": "ui_text",
        "z": "51164a2570c98448",
        "group": "ba4217cd1248e741",
        "order": 8,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Tank B",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 890,
        "y": 640,
        "wires": []
    },
    {
        "id": "acb8cb883b4ec0f1",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "d": true,
        "name": "V2",
        "label": "V2",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 13,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "V2",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 890,
        "y": 420,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "c38234f2fb8717f0",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "d": true,
        "name": "V4",
        "label": "V4",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "V4",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 890,
        "y": 760,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "07db7490fddc2459",
        "type": "ui_slider",
        "z": "51164a2570c98448",
        "name": "TIDE_B",
        "label": "Tide",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 18,
        "width": 3,
        "height": 2,
        "passthru": true,
        "outs": "end",
        "topic": "TIDE_B",
        "topicType": "str",
        "min": 0,
        "max": "780",
        "step": 1,
        "className": "",
        "x": 900,
        "y": 880,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "8f710de14cbfe7d5",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "name": "UPPER_MAGNETIC_VALVE",
        "label": "Upper Magnetic Valve",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 26,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "UPPER_MAGNETIC_VALVE",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 960,
        "y": 1000,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "02d35afca4a755e0",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "name": "LOWER_MAGNETIC_VALVE",
        "label": "Lower Magnetic Valve",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 27,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "LOWER_MAGNETIC_VALVE",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 970,
        "y": 1040,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "834b4577fced86e3",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "name": "HEAT_A",
        "label": "Heat",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 21,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "HEAT_A",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 900,
        "y": 460,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "3597050a8b6fcac6",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "name": "HEAT_B",
        "label": "Heat",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 22,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "HEAT_B",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 900,
        "y": 800,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "5ab4cc0796ce38e0",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "name": "COOL_A",
        "label": "Cool",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 23,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "COOL_A",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 900,
        "y": 500,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "a85a13eb7dd55498",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "name": "COOL_B",
        "label": "Cool",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 24,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "COOL_B",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 900,
        "y": 840,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "895748c4fa71b508",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "name": "MANUAL_CONTROL",
        "label": "Manual Control",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 28,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "MANUAL_CONTROL",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 940,
        "y": 1080,
        "wires": [
            [
                "c0b95e498e864c46"
            ]
        ]
    },
    {
        "id": "c0b95e498e864c46",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Write MANUAL_CONTROL to setpoint",
        "func": "// Write 'MANUAL_CONTROL' to setpoint\nsetpoint = flow.get(\"setpoint\") || {};\nsetpoint[msg.topic] = Number(msg.payload);\nflow.set(\"setpoint\", setpoint);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1080,
        "wires": [
            [
                "c26dfbb2ff8817dd"
            ]
        ]
    },
    {
        "id": "1e247344ad3c7afa",
        "type": "ui_gauge",
        "z": "51164a2570c98448",
        "name": "",
        "group": "ba4217cd1248e741",
        "order": 3,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "Temp",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "40",
        "colors": [
            "#24abff",
            "#24abff",
            "#24abff"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 890,
        "y": 100,
        "wires": []
    },
    {
        "id": "0763dd67456ee017",
        "type": "ui_gauge",
        "z": "51164a2570c98448",
        "name": "",
        "group": "ba4217cd1248e741",
        "order": 4,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "pH",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#24abff",
            "#24abff",
            "#24abff"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 890,
        "y": 140,
        "wires": []
    },
    {
        "id": "a369493ca0198242",
        "type": "ui_gauge",
        "z": "51164a2570c98448",
        "name": "",
        "group": "ba4217cd1248e741",
        "order": 5,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "Cond",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#24abff",
            "#24abff",
            "#24abff"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 890,
        "y": 180,
        "wires": []
    },
    {
        "id": "385e8f677d1858e8",
        "type": "ui_gauge",
        "z": "51164a2570c98448",
        "name": "",
        "group": "ba4217cd1248e741",
        "order": 6,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "Oxygen",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#24abff",
            "#24abff",
            "#24abff"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 900,
        "y": 220,
        "wires": []
    },
    {
        "id": "0f4c31d89d78ba8d",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "name": "PUMP",
        "label": "Pump",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 25,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "PUMP",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 890,
        "y": 960,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "69269d2f2f5ae9f9",
        "type": "modbus-server",
        "z": "51164a2570c98448",
        "name": "",
        "logEnabled": true,
        "hostname": "localhost",
        "serverPort": 10502,
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": 10000,
        "holdingBufferSize": "64000",
        "inputBufferSize": 10000,
        "discreteBufferSize": 10000,
        "showErrors": false,
        "x": 300,
        "y": 1200,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "d8138258c98e82ce",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Write to setpoint",
        "func": "// Write to setpoint\nvar status = Number(msg.payload);\nvar setpoint = flow.get(\"setpoint\");\n\n//if (setpoint != null && setpoint[\"MANUAL_CONTROL\"] == true) {\nif (setpoint != null) {\n    setpoint[msg.topic] = status;\n    msg.payload = setpoint;\n    return msg;\n}\n/*\nif (msg.topic == \"TEMP_SETPOINT_A\" || msg.topic == \"TEMP_SETPOINT_B\") {\n    setpoint[msg.topic] = status;\n    msg.payload = setpoint;\n    return msg;\n}\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 600,
        "wires": [
            [
                "cadef9e1c83fc188"
            ]
        ]
    },
    {
        "id": "d32b3369525c798c",
        "type": "modbus-flex-write",
        "z": "51164a2570c98448",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "46220ce9c8d2b07d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 930,
        "y": 1480,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f2ccb5d74d566a79",
        "type": "debug",
        "z": "51164a2570c98448",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1240,
        "wires": []
    },
    {
        "id": "4c078f4950075aa5",
        "type": "modbus-read",
        "z": "51164a2570c98448",
        "name": "Modbus: read registers 32033-32064",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "32033",
        "quantity": "32",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "46220ce9c8d2b07d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 390,
        "y": 1320,
        "wires": [
            [
                "ead90c7d07595d0c"
            ],
            []
        ]
    },
    {
        "id": "ead90c7d07595d0c",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "read sps_status",
        "func": "var address_list = global.get(\"feedback_register_address_list\");\n\nif (address_list != null) {\n    let modbus_status = msg.payload;\n    let first_key = Object.keys(address_list)[0]\n    let modbus_address = Number(address_list[first_key]);\n    let status;\n    \n    if (global.get(\"sps_status\") == null) { status = {}; }\n    else { status = global.get(\"sps_status\"); }\n    \n    for (var i = 0; i < modbus_status.length; i++){\n        for (var r in address_list) {\n            if (modbus_address == address_list[r]) { status[r] = modbus_status[i]; }\n        }\n        modbus_address++;\n    }\n    global.set(\"sps_status\", status);\n    msg.payload = global.get(\"sps_status\");\n}\nelse { msg.payload = false; }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1320,
        "wires": [
            [
                "a42761283499bbd8",
                "4ddf8ca771d353d0",
                "9c4e440634e179ee"
            ]
        ]
    },
    {
        "id": "a42761283499bbd8",
        "type": "switch",
        "z": "51164a2570c98448",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 1320,
        "wires": [
            [
                "c1fb18af26f09fec"
            ]
        ]
    },
    {
        "id": "c1fb18af26f09fec",
        "type": "change",
        "z": "51164a2570c98448",
        "name": "Set flow&global variables",
        "rules": [
            {
                "t": "set",
                "p": "write_register_address_list",
                "pt": "global",
                "to": "{\"V1\":32001,\"V2\":32002,\"V3\":32003,\"V4\":32004,\"PUMP\":32005,\"UPPER_MAGNETIC_VALVE\":32006,\"LOWER_MAGNETIC_VALVE\":32007,\"HEAT_A\":32008,\"HEAT_B\":32009,\"COOL_A\":32010,\"COOL_B\":32011,\"TIDE_A\":32012,\"TIDE_B\":32013,\"TEMP_SETPOINT_A\":32014,\"TEMP_SETPOINT_B\":32015,\"SPARE_16\":32016,\"SPARE_17\":32017,\"SPARE_18\":32018,\"SPARE_19\":32019,\"SPARE_20\":32020,\"SPARE_21\":32021,\"SPARE_22\":32022,\"SPARE_23\":32023,\"SPARE_24\":32024,\"SPARE_25\":32025,\"SPARE_26\":32026,\"SPARE_27\":32027,\"SPARE_28\":32028,\"SPARE_29\":32029,\"HEARTBEAT\":32030,\"LAST_STEP_NUMBER\":32031,\"MANUAL_CONTROL\":32032}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "feedback_register_address_list",
                "pt": "global",
                "to": "{\"V1\":32033,\"V2\":32034,\"V3\":32035,\"V4\":32036,\"PUMP\":32037,\"UPPER_MAGNETIC_VALVE\":32038,\"LOWER_MAGNETIC_VALVE\":32039,\"HEAT_A\":32040,\"HEAT_B\":32041,\"COOL_A\":32042,\"COOL_B\":32043,\"TIDE_A\":32044,\"TIDE_B\":32045,\"TEMP_SETPOINT_A\":32046,\"TEMP_SETPOINT_B\":32047,\"SPARE_16\":32048,\"SPARE_17\":32049,\"SPARE_18\":32050,\"LAST_STEP_NUMBER\":32051,\"MANUAL_CONTROL\":32052,\"RO_TEMP\":32053,\"RO_PH\":32054,\"RO_COND\":32055,\"RO_OXYGEN\":32056,\"RO_SPARE_25\":32057,\"RO_SPARE_26\":32058,\"RO_SPARE_27\":32059,\"RO_SPARE_28\":32060,\"RO_SPARE_29\":32061,\"RO_SPARE_30\":32062,\"RO_SPARE_31\":32063,\"RO_SPARE_32\":32064}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "setpoint",
                "pt": "flow",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "sps_status",
                "pt": "global",
                "to": "{\"MANUAL_CONTROL\":0}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "58cc1fe2b66c5265",
        "type": "inject",
        "z": "51164a2570c98448",
        "name": "Reset globals",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 1380,
        "wires": [
            [
                "c1fb18af26f09fec"
            ]
        ]
    },
    {
        "id": "6ae7170c5fccfc4a",
        "type": "inject",
        "z": "51164a2570c98448",
        "name": "Trigger 1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "9e62b2cebd53cbd4",
                "0f8c4117431bd527",
                "d705ce818336ad97"
            ]
        ]
    },
    {
        "id": "9e62b2cebd53cbd4",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Read status",
        "func": "var status = global.get(\"sps_status\");\n\nif (status != null){\n    let manual_control = Boolean(status[\"MANUAL_CONTROL\"])\n    if (manual_control == false) { msg.payload = status; }\n    else { msg.payload = null; }\n    msg.enabled = manual_control;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 600,
        "wires": [
            [
                "d89f95907146176b",
                "2086eb186941f521",
                "7d73d5d0ac617f78",
                "1b075f1d24e9a5c0",
                "0fd5cf285d3f392d",
                "15d7760739b7a13b",
                "202ef10d06cb20c6",
                "5fb752c59ec80d40",
                "9f5b79a4732417be",
                "cc510c94199283ba",
                "faf9cbb9bb658881",
                "9c086814f3ec5283",
                "243aeea783e13442",
                "eec38d1c40c3ce43",
                "ecb02bb24a61dedd",
                "f47c3ceaa2d5a83d"
            ]
        ]
    },
    {
        "id": "faf9cbb9bb658881",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "V1",
        "func": "if (msg.payload != null){\n    msg.payload = Boolean(msg.payload[\"V1\"]);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 340,
        "wires": [
            [
                "8c25cdca95a4f35d"
            ]
        ]
    },
    {
        "id": "cc510c94199283ba",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "V3",
        "func": "if (msg.payload != null){\n    msg.payload = Boolean(msg.payload[\"V3\"]);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 680,
        "wires": [
            [
                "d98048a9173c794f"
            ]
        ]
    },
    {
        "id": "6dfd4cf90c503e43",
        "type": "inject",
        "z": "51164a2570c98448",
        "name": "Trigger 1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 1480,
        "wires": [
            [
                "229df4c34158cfcb",
                "64cdb25d28de2549"
            ]
        ]
    },
    {
        "id": "229df4c34158cfcb",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Compare MANUAL_CONTROL Setpoint vs Status",
        "func": "var setpoint = flow.get(\"setpoint\");\nvar status = global.get(\"sps_status\");\nvar address_list = global.get(\"write_register_address_list\");\n\nmsg.payload = false;\nif (status != null && setpoint != null && address_list != null){\n    \n    if (setpoint[\"MANUAL_CONTROL\"] != status[\"MANUAL_CONTROL\"]){\n        let modbus_address = address_list[\"MANUAL_CONTROL\"];\n        msg.payload = { value: setpoint[\"MANUAL_CONTROL\"], 'fc': 6, 'unitid': 1, 'address': modbus_address , 'quantity': 1 };\n        return msg;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1480,
        "wires": [
            [
                "d32b3369525c798c",
                "38a10b56ae391297"
            ]
        ]
    },
    {
        "id": "cadef9e1c83fc188",
        "type": "debug",
        "z": "51164a2570c98448",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 600,
        "wires": []
    },
    {
        "id": "3d12a66ae3e0cdcc",
        "type": "ui_button",
        "z": "51164a2570c98448",
        "name": "",
        "group": "ba4217cd1248e741",
        "order": 29,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Write to system",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 800,
        "y": 1600,
        "wires": [
            [
                "a393b410b58b216b",
                "1f5bf621dfcf15af",
                "a741a6a17d12ca20"
            ]
        ]
    },
    {
        "id": "a393b410b58b216b",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Prepare Modbus Payload",
        "func": "var address_list = global.get(\"write_register_address_list\");\nvar setpoint = flow.get(\"setpoint\");\n\nif (address_list != null && setpoint != null){\n    let values = [];\n    \n    let first_key = Object.keys(address_list)[0]\n    let modbus_address = Number(address_list[first_key]);\n    let quantity = 0\n    \n    for (var key in address_list){\n        if (setpoint[key] != null){\n            values.push(setpoint[key]);\n            quantity++;\n        }\n    }\n\n    msg.payload = { value: values, 'fc': 16, 'unitid': 1, 'address': modbus_address , 'quantity': quantity };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1600,
        "wires": [
            [
                "a36fa23fc0fa93e6",
                "8809cef67d9ae454"
            ]
        ]
    },
    {
        "id": "a36fa23fc0fa93e6",
        "type": "modbus-flex-write",
        "z": "51164a2570c98448",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "46220ce9c8d2b07d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 1610,
        "y": 1580,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7c46258cc5f5e1ae",
        "type": "inject",
        "z": "51164a2570c98448",
        "name": "Trigger 1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 1600,
        "wires": [
            [
                "8fb7d099d6da7d32"
            ]
        ]
    },
    {
        "id": "8fb7d099d6da7d32",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Compare Setpoint vs Status",
        "func": "var setpoint = flow.get(\"setpoint\") || {};\nvar sps_status = global.get(\"sps_status\") || {};\n\nmsg.enabled = false;\nif (sps_status[\"MANUAL_CONTROL\"] == 1){\n    for (let x in setpoint){\n        if (x != \"MANUAL_CONTROL\"){\n            if (setpoint[x] != sps_status[x]){\n                //node.warn(x);\n                //node.warn(setpoint[x]);\n                //node.warn(status[x]);\n                msg.enabled = true; break;\n            }\n        }\n    }\n}\nif (setpoint[\"TEMP_SETPOINT_A\"] != sps_status[\"TEMP_SETPOINT_A\"]){ msg.enabled = true; }\nif (setpoint[\"TEMP_SETPOINT_B\"] != sps_status[\"TEMP_SETPOINT_B\"]){ msg.enabled = true; }\nif (setpoint[\"TIDE_A\"] != sps_status[\"TIDE_A\"]) { msg.enabled = true; }\nif (setpoint[\"TIDE_B\"] != sps_status[\"TIDE_B\"]) { msg.enabled = true; }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1600,
        "wires": [
            [
                "3d12a66ae3e0cdcc"
            ]
        ]
    },
    {
        "id": "243aeea783e13442",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "V4",
        "func": "if (msg.payload != null){\n    setpoint = flow.get(\"setpoint\") || {};\n    setpoint[\"V4\"] = msg.payload[\"V4\"];\n    flow.set(\"setpoint\", setpoint);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "9c086814f3ec5283",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "V2",
        "func": "if (msg.payload != null){\n    let setpoint = flow.get(\"setpoint\") || {};\n    setpoint[\"V2\"] = msg.payload[\"V2\"];\n    flow.set(\"setpoint\", setpoint);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "5fb752c59ec80d40",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "COOL_A",
        "func": "if (msg.payload != null){\n    msg.payload = Boolean(msg.payload[\"COOL_A\"]);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 500,
        "wires": [
            [
                "5ab4cc0796ce38e0"
            ]
        ]
    },
    {
        "id": "2086eb186941f521",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "COOL_B",
        "func": "if (msg.payload != null){\n    msg.payload = Boolean(msg.payload[\"COOL_B\"]);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 840,
        "wires": [
            [
                "a85a13eb7dd55498"
            ]
        ]
    },
    {
        "id": "202ef10d06cb20c6",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "CURRENT_TIDE_A",
        "func": "if (msg.payload != null) {\n    msg.payload = msg.payload[\"TIDE_A\"];\n}\nmsg.enabled = true;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "c9653abf31104242"
            ]
        ]
    },
    {
        "id": "7d73d5d0ac617f78",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "CURRENT_TIDE_B",
        "func": "if (msg.payload != null){\n    msg.payload = msg.payload[\"TIDE_B\"];\n}\nmsg.enabled = true;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 920,
        "wires": [
            [
                "81e1cb5bcdbab2ad"
            ]
        ]
    },
    {
        "id": "d89f95907146176b",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "HEAT_B ",
        "func": "if (msg.payload != null){\n    msg.payload = Boolean(msg.payload[\"HEAT_B\"]);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 800,
        "wires": [
            [
                "3597050a8b6fcac6"
            ]
        ]
    },
    {
        "id": "0fd5cf285d3f392d",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "UPPER_MAGNETIC_VALVE",
        "func": "if (msg.payload != null){\n    msg.payload = Boolean(msg.payload[\"UPPER_MAGNETIC_VALVE\"]);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1000,
        "wires": [
            [
                "8f710de14cbfe7d5"
            ]
        ]
    },
    {
        "id": "1b075f1d24e9a5c0",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "PUMP",
        "func": "if (msg.payload != null){\n    msg.payload = Boolean(msg.payload[\"PUMP\"]);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 960,
        "wires": [
            [
                "0f4c31d89d78ba8d"
            ]
        ]
    },
    {
        "id": "9f5b79a4732417be",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "HEAT_A",
        "func": "if (msg.payload != null){\n    msg.payload = Boolean(msg.payload[\"HEAT_A\"]);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 460,
        "wires": [
            [
                "834b4577fced86e3"
            ]
        ]
    },
    {
        "id": "15d7760739b7a13b",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "LOWER_MAGNETIC_VALVE",
        "func": "if (msg.payload != null){\n    msg.payload = Boolean(msg.payload[\"LOWER_MAGNETIC_VALVE\"]);\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1040,
        "wires": [
            [
                "02d35afca4a755e0"
            ]
        ]
    },
    {
        "id": "77e184d1718ac484",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "RO_TEMP",
        "func": "if (msg.payload != null){\n    msg.payload = msg.payload[\"RO_TEMP\"]/100;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 100,
        "wires": [
            [
                "1e247344ad3c7afa"
            ]
        ]
    },
    {
        "id": "b2ea6e5f95f50950",
        "type": "inject",
        "z": "51164a2570c98448",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1070,
        "y": 1680,
        "wires": [
            [
                "0ed52b1e0134f5ec"
            ]
        ]
    },
    {
        "id": "0ed52b1e0134f5ec",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Insert some RO values",
        "func": "msg.payload = { value: [1250,1360,1470,1580], 'fc': 16, 'unitid': 1, 'address': 32053 , 'quantity': 4 };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1680,
        "wires": [
            [
                "a36fa23fc0fa93e6"
            ]
        ]
    },
    {
        "id": "0f8c4117431bd527",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Read status RO",
        "func": "var status = global.get(\"sps_status\");\n\nif (status != null){\n    msg.payload = status;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "77e184d1718ac484",
                "918ac860e7a0f619",
                "714926aa96291ec2",
                "a51cc46b59174854"
            ]
        ]
    },
    {
        "id": "918ac860e7a0f619",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "RO_PH",
        "func": "if (msg.payload != null){\n    msg.payload = msg.payload[\"RO_PH\"]/100;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 140,
        "wires": [
            [
                "0763dd67456ee017"
            ]
        ]
    },
    {
        "id": "714926aa96291ec2",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "RO_COND",
        "func": "if (msg.payload != null){\n    msg.payload = msg.payload[\"RO_COND\"]/100;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 180,
        "wires": [
            [
                "a369493ca0198242"
            ]
        ]
    },
    {
        "id": "a51cc46b59174854",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "RO_OXYGEN",
        "func": "if (msg.payload != null){\n    msg.payload = msg.payload[\"RO_OXYGEN\"]/100;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 220,
        "wires": [
            [
                "385e8f677d1858e8"
            ]
        ]
    },
    {
        "id": "17d398ac68527a69",
        "type": "ui_text",
        "z": "51164a2570c98448",
        "group": "ba4217cd1248e741",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Tank Pair 1",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 630,
        "y": 20,
        "wires": []
    },
    {
        "id": "667ab4fb4b6b67c2",
        "type": "ui_text",
        "z": "51164a2570c98448",
        "group": "ba4217cd1248e741",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Status",
        "label": "Status: {{msg.payload}}",
        "format": "",
        "layout": "row-center",
        "className": "",
        "x": 610,
        "y": 60,
        "wires": []
    },
    {
        "id": "d705ce818336ad97",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "get LAST_STEP",
        "func": "step_list = [\n    \"STOP\",\n    \"PREP TANK A\",\n    \"VENT TANK A\",\n    \"RUN TANK A\",\n    \"STOP TANK A\",\n    \"DRAIN SYSTEM A\",\n    \"PREP TANK B\",\n    \"VENT TANK B\",\n    \"RUN TANK B\",\n    \"STOP TANK B\",\n    \"DRAIN SYSTEM B\"\n]\nsps_status = global.get(\"sps_status\") || {};\nif (sps_status[\"LAST_STEP_NUMBER\"] == null) { msg.payload = \"UNKNOWN\" }\nelse if (sps_status[\"MANUAL_CONTROL\"] == 1) { msg.payload = \"MANUAL CONTROL\" }\nelse { msg.payload = step_list[sps_status[\"LAST_STEP_NUMBER\"]] }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 60,
        "wires": [
            [
                "667ab4fb4b6b67c2"
            ]
        ]
    },
    {
        "id": "c26dfbb2ff8817dd",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "MANUAL CONTROL == 0",
        "func": "if (msg.payload == 0){\n    return msg;   \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1080,
        "wires": [
            [
                "d53c12f54431f534"
            ]
        ]
    },
    {
        "id": "d53c12f54431f534",
        "type": "link out",
        "z": "51164a2570c98448",
        "name": "",
        "mode": "link",
        "links": [
            "1d6e67eefea1a621"
        ],
        "x": 1695,
        "y": 1080,
        "wires": []
    },
    {
        "id": "cd2693e5a3ee2429",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Sim Feedback",
        "func": "var address_list = global.get(\"feedback_register_address_list\");\nvar setpoint = flow.get(\"setpoint\");\n\nif (address_list != null && setpoint != null){\n    let values = [];\n    \n    let first_key = Object.keys(address_list)[0]\n    let modbus_address = Number(address_list[first_key]);\n    let quantity = 0\n    \n    for (var key in address_list){\n        if (setpoint[key] != null){\n            values.push(setpoint[key]);\n            quantity++;\n        }\n    }\n\n    msg.payload = { value: values, 'fc': 16, 'unitid': 1, 'address': modbus_address , 'quantity': quantity };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1540,
        "wires": [
            [
                "a36fa23fc0fa93e6"
            ]
        ]
    },
    {
        "id": "1f5bf621dfcf15af",
        "type": "delay",
        "z": "51164a2570c98448",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1020,
        "y": 1560,
        "wires": [
            [
                "cd2693e5a3ee2429"
            ]
        ]
    },
    {
        "id": "c12513da46b5b6fa",
        "type": "inject",
        "z": "51164a2570c98448",
        "name": "Trigger 10s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 1540,
        "wires": [
            [
                "39fd36d3f48c66b7"
            ]
        ]
    },
    {
        "id": "39fd36d3f48c66b7",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Send Heartbeat",
        "func": "address_list = global.get(\"write_register_address_list\");\nheartbeat_register = address_list[\"HEARTBEAT\"];\nmsg.payload = { value: [1], 'fc': 16, 'unitid': 1, 'address': heartbeat_register , 'quantity': 1 };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1540,
        "wires": [
            [
                "d32b3369525c798c"
            ]
        ]
    },
    {
        "id": "38a10b56ae391297",
        "type": "debug",
        "z": "51164a2570c98448",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1520,
        "wires": []
    },
    {
        "id": "1a220d7c6bc1630f",
        "type": "ui_numeric",
        "z": "51164a2570c98448",
        "name": "TEMP_SETPOINT_A",
        "label": "",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 9,
        "width": 3,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "TEMP_SETPOINT_A",
        "topicType": "str",
        "format": "{{value}} °C",
        "min": 0,
        "max": "25",
        "step": "0.1",
        "className": "",
        "x": 940,
        "y": 380,
        "wires": [
            [
                "b4e6ed54679c572d",
                "cc98f4ed563b5416"
            ]
        ]
    },
    {
        "id": "8c242c6939227338",
        "type": "ui_numeric",
        "z": "51164a2570c98448",
        "name": "TEMP_SETPOINT_B",
        "label": "",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 10,
        "width": 3,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "TEMP_SETPOINT_B",
        "topicType": "str",
        "format": "{{value}} °C",
        "min": 0,
        "max": "25",
        "step": "0.1",
        "className": "",
        "x": 940,
        "y": 720,
        "wires": [
            [
                "b4e6ed54679c572d"
            ]
        ]
    },
    {
        "id": "300d90ed8726dfd1",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "TEMP_SETPOINT_A",
        "func": "if (msg.payload != null) {\n    msg.payload = msg.payload[\"TEMP_SETPOINT_A\"];\n}\n\n// if there is an actual value format it as float\nif (msg.payload != null) {\n    msg.payload = parseFloat(0.01 * msg.payload);\n}\nmsg.enabled = true;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 380,
        "wires": [
            [
                "1a220d7c6bc1630f"
            ]
        ]
    },
    {
        "id": "26f21e561a70734b",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "TEMP_SETPOINT_B",
        "func": "if (msg.payload != null) {\n    msg.payload = msg.payload[\"TEMP_SETPOINT_B\"];\n}\n\n// if there is an actual value format it as float\nif (msg.payload != null) {\n    msg.payload = parseFloat(0.01 * msg.payload);\n}\nmsg.enabled = true;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 720,
        "wires": [
            [
                "8c242c6939227338"
            ]
        ]
    },
    {
        "id": "b4e6ed54679c572d",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "multiply *100 for modbus",
        "func": "msg.payload = Math.trunc(msg.payload*100)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 420,
        "wires": [
            [
                "d8138258c98e82ce"
            ]
        ]
    },
    {
        "id": "cc98f4ed563b5416",
        "type": "debug",
        "z": "51164a2570c98448",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 340,
        "wires": []
    },
    {
        "id": "dce1442283bac825",
        "type": "inject",
        "z": "51164a2570c98448",
        "name": "Init Temp-Setpoint",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "12",
        "payloadType": "num",
        "x": 650,
        "y": 280,
        "wires": [
            [
                "1a220d7c6bc1630f",
                "8c242c6939227338",
                "cc98f4ed563b5416"
            ]
        ]
    },
    {
        "id": "4ddf8ca771d353d0",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "",
        "func": "msg.payload = msg.payload[\"LAST_STEP_NUMBER\"];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1260,
        "wires": [
            [
                "f2ccb5d74d566a79"
            ]
        ]
    },
    {
        "id": "eec38d1c40c3ce43",
        "type": "debug",
        "z": "51164a2570c98448",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 300,
        "wires": []
    },
    {
        "id": "a741a6a17d12ca20",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "send_setpoint_to_rest_module",
        "func": "msg.setpoint = RED.util.cloneMessage(flow.get(\"setpoint\"))\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1760,
        "wires": [
            [
                "cca8f02bd5f0d641"
            ]
        ]
    },
    {
        "id": "cca8f02bd5f0d641",
        "type": "link out",
        "z": "51164a2570c98448",
        "name": "lnk_out_manual_setpoint_to_rest",
        "mode": "link",
        "links": [
            "c76a6fae6adc5754"
        ],
        "x": 1255,
        "y": 1760,
        "wires": []
    },
    {
        "id": "8809cef67d9ae454",
        "type": "debug",
        "z": "51164a2570c98448",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1620,
        "wires": []
    },
    {
        "id": "64cdb25d28de2549",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Sim Feedback",
        "func": "var setpoint = flow.get(\"setpoint\");\nvar status = global.get(\"sps_status\");\nvar address_list = global.get(\"feedback_register_address_list\");\n\nmsg.payload = false;\nif (status != null && setpoint != null && address_list != null){\n    \n    if (setpoint[\"MANUAL_CONTROL\"] != status[\"MANUAL_CONTROL\"]){\n        let modbus_address = address_list[\"MANUAL_CONTROL\"];\n        msg.payload = { value: setpoint[\"MANUAL_CONTROL\"], 'fc': 6, 'unitid': 1, 'address': modbus_address , 'quantity': 1 };\n        return msg;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1440,
        "wires": [
            [
                "d32b3369525c798c"
            ]
        ]
    },
    {
        "id": "bf1081f9c1ab7aa0",
        "type": "inject",
        "z": "51164a2570c98448",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "6",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 850,
        "y": 1760,
        "wires": [
            [
                "a741a6a17d12ca20"
            ]
        ]
    },
    {
        "id": "84b3d29613274c97",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Insert from REST-Request",
        "func": "var flow_setpoint = flow.get(\"setpoint\");\n\n// paste the values from the rest-request to the manual-control setpoint\nfor(let key in msg.setpoint){\n    //special treatment for float values represented as int\n    switch(key) {\n        case \"TEMP_SETPOINT_A\":\n            msg.setpoint[key] = parseInt(msg.setpoint[key] * 100.0);\n            break;\n        case \"TEMP_SETPOINT_B\":\n            msg.setpoint[key] = parseInt(msg.setpoint[key] * 100.0);\n            break;\n    }\n    flow_setpoint[key] = msg.setpoint[key];\n}\n\n// and move the setpoint, to easily pass the setpoint to the dashboard elements\nmsg.payload = flow_setpoint;\ndelete msg.setpoint;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1680,
        "wires": [
            [
                "a393b410b58b216b",
                "1f5bf621dfcf15af",
                "90bfa2ce0d20a24f",
                "a741a6a17d12ca20"
            ]
        ]
    },
    {
        "id": "fdcf63cccbac0ce9",
        "type": "link in",
        "z": "51164a2570c98448",
        "name": "lnk_in_rest_setpoint_to_dashboard",
        "links": [
            "b21514a3b309e9fa"
        ],
        "x": 345,
        "y": 1680,
        "wires": [
            [
                "84b3d29613274c97"
            ]
        ]
    },
    {
        "id": "90bfa2ce0d20a24f",
        "type": "link out",
        "z": "51164a2570c98448",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "3939733a57e96169"
        ],
        "x": 905,
        "y": 1680,
        "wires": []
    },
    {
        "id": "3939733a57e96169",
        "type": "link in",
        "z": "51164a2570c98448",
        "name": "link in 1",
        "links": [
            "90bfa2ce0d20a24f"
        ],
        "x": 255,
        "y": 660,
        "wires": [
            [
                "faf9cbb9bb658881",
                "300d90ed8726dfd1",
                "cc510c94199283ba",
                "26f21e561a70734b",
                "1b075f1d24e9a5c0",
                "0fd5cf285d3f392d",
                "15d7760739b7a13b",
                "40a9852fb15c77a6",
                "eee1d24303f71362",
                "f47c3ceaa2d5a83d",
                "ecb02bb24a61dedd"
            ]
        ]
    },
    {
        "id": "9c4e440634e179ee",
        "type": "link out",
        "z": "51164a2570c98448",
        "name": "lnk_out_modbus_read_to_rest",
        "mode": "link",
        "links": [
            "8cc6188dae98cc80"
        ],
        "x": 835,
        "y": 1200,
        "wires": []
    },
    {
        "id": "5da0fb6680030a20",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "name": "AUTO_TIDE_A",
        "label": "Auto-Tide",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 15,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "AUTO_TIDE_A",
        "topicType": "str",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 920,
        "y": 1120,
        "wires": [
            [
                "52b37fc435b7d54f"
            ]
        ]
    },
    {
        "id": "1c19ba01064aef11",
        "type": "ui_switch",
        "z": "51164a2570c98448",
        "name": "AUTO_TIDE_B",
        "label": "Auto-Tide",
        "tooltip": "",
        "group": "ba4217cd1248e741",
        "order": 16,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "AUTO_TIDE_B",
        "topicType": "str",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 920,
        "y": 1160,
        "wires": [
            [
                "52b37fc435b7d54f"
            ]
        ]
    },
    {
        "id": "52b37fc435b7d54f",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "set auto-tide",
        "func": "var modes = global.get(\"modes\");\n\nif(msg.topic === \"AUTO_TIDE_A\"){\n    modes[\"auto_tide_a\"] = msg.payload;\n}\nelse if(msg.topic === \"AUTO_TIDE_B\"){\n    modes[\"auto_tide_b\"] = msg.payload;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "40a9852fb15c77a6",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "AUTO_TIDE_A",
        "func": "var modes = global.get(\"modes\");\nif (modes[\"auto_tide_a\"] != null){\n    msg.payload = modes[\"auto_tide_a\"];\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1120,
        "wires": [
            [
                "5da0fb6680030a20"
            ]
        ]
    },
    {
        "id": "eee1d24303f71362",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "AUTO_TIDE_B",
        "func": "var modes = global.get(\"modes\");\nif (modes[\"auto_tide_b\"] != null){\n    msg.payload = modes[\"auto_tide_b\"];\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1160,
        "wires": [
            [
                "1c19ba01064aef11"
            ]
        ]
    },
    {
        "id": "ccdfe9cf53a57de5",
        "type": "inject",
        "z": "51164a2570c98448",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 1140,
        "wires": [
            [
                "40a9852fb15c77a6",
                "eee1d24303f71362"
            ]
        ]
    },
    {
        "id": "d8e95c52fa7515a6",
        "type": "http request",
        "z": "51164a2570c98448",
        "name": "Pegelonline List",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://www.pegelonline.wsv.de/webservices/rest-api/v2/stations/LIST AUF SYLT/W/measurements.json?start=P0DT0H30M",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 500,
        "y": 1900,
        "wires": [
            [
                "61ea5c7cb026df61"
            ]
        ]
    },
    {
        "id": "61ea5c7cb026df61",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Get latest tide level",
        "func": "var latest_entry = msg.payload[msg.payload.length - 1];\nmsg.payload = Number(latest_entry[\"value\"]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1900,
        "wires": [
            [
                "5e9b2c69bdba0e3b",
                "81db5d960b883648"
            ]
        ]
    },
    {
        "id": "5e9b2c69bdba0e3b",
        "type": "debug",
        "z": "51164a2570c98448",
        "name": "real",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 1860,
        "wires": []
    },
    {
        "id": "81db5d960b883648",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "Convert to Meso range",
        "func": "const real_max = 589.0;\nconst real_min = 409.0;\n\nconst meso_max = 780;\nconst meso_min = 0;\n\nconst real_val = msg.payload;\n\nlet meso_val = (real_val - real_min) / 2.3;\nmeso_val = meso_val * 10;\nmeso_val = Math.trunc(meso_val);\n\n\nif(meso_val > meso_max){\n    meso_val = meso_max;\n}else if(meso_val < meso_min){\n    meso_val = meso_min;\n}\n\nvar modes =  global.get(\"modes\");\nvar setpoint = flow.get(\"setpoint\");\n\nif (modes[\"auto_tide_a\"] == 1) {\n    setpoint[\"TIDE_A\"] = meso_val;\n}\nif (modes[\"auto_tide_b\"] == 1) {\n    setpoint[\"TIDE_B\"] = meso_val;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1900,
        "wires": [
            [
                "68bcdfd5b333371f",
                "a393b410b58b216b",
                "1f5bf621dfcf15af",
                "a741a6a17d12ca20"
            ]
        ]
    },
    {
        "id": "68bcdfd5b333371f",
        "type": "debug",
        "z": "51164a2570c98448",
        "name": "meso",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "setpoint",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1860,
        "wires": []
    },
    {
        "id": "12d50a6b86948396",
        "type": "inject",
        "z": "51164a2570c98448",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1900,
        "wires": [
            [
                "116ae0a842962aa1"
            ]
        ]
    },
    {
        "id": "116ae0a842962aa1",
        "type": "switch",
        "z": "51164a2570c98448",
        "name": "auto-tide-a?",
        "property": "modes.auto_tide_a",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 1900,
        "wires": [
            [
                "d8e95c52fa7515a6"
            ],
            [
                "c0bc9e4df1bfe524"
            ]
        ]
    },
    {
        "id": "c0bc9e4df1bfe524",
        "type": "switch",
        "z": "51164a2570c98448",
        "name": "auto-tide-b?",
        "property": "modes.auto_tide_b",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 1940,
        "wires": [
            [
                "d8e95c52fa7515a6"
            ],
            []
        ]
    },
    {
        "id": "c9653abf31104242",
        "type": "ui_text",
        "z": "51164a2570c98448",
        "group": "ba4217cd1248e741",
        "order": 19,
        "width": 3,
        "height": 1,
        "name": "CURRENT_TIDE_A",
        "label": "Current Tide:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 940,
        "y": 580,
        "wires": []
    },
    {
        "id": "81e1cb5bcdbab2ad",
        "type": "ui_text",
        "z": "51164a2570c98448",
        "group": "ba4217cd1248e741",
        "order": 20,
        "width": 3,
        "height": 1,
        "name": "CURRENT_TIDE_B",
        "label": "Current Tide:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 940,
        "y": 920,
        "wires": []
    },
    {
        "id": "f47c3ceaa2d5a83d",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "TIDE_B",
        "func": "var modes = global.get(\"modes\");\nif (modes[\"auto_tide_b\"] == 0) {\n    msg.enabled = true;\n    delete msg.payload;\n}\nelse {\n    msg.enabled = false;\n}\n\nvar setpoint = flow.get(\"setpoint\");\nmsg.payload = setpoint[\"TIDE_B\"];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 880,
        "wires": [
            [
                "07db7490fddc2459"
            ]
        ]
    },
    {
        "id": "ecb02bb24a61dedd",
        "type": "function",
        "z": "51164a2570c98448",
        "name": "TIDE_A",
        "func": "var modes = global.get(\"modes\");\nif (modes[\"auto_tide_a\"] == 0) {\n    msg.enabled = true;\n    delete msg.payload;\n}\nelse {\n    msg.enabled = false;\n}\n\nvar setpoint = flow.get(\"setpoint\");\nmsg.payload = setpoint[\"TIDE_A\"];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 540,
        "wires": [
            [
                "ca802baf35ab3c2d"
            ]
        ]
    },
    {
        "id": "c97034c6148ec6db",
        "type": "inject",
        "z": "fc5cdac23d2176f1",
        "name": "Trigger 1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 420,
        "wires": [
            [
                "3d56e3852c656edf",
                "422253a73b4f16b4"
            ]
        ]
    },
    {
        "id": "3d56e3852c656edf",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "check sps_status MANUAL_CONTROL",
        "func": "var sps_status = global.get(\"sps_status\") || {};\n\nif (sps_status[\"MANUAL_CONTROL\"] != null){\n    msg.topic = \"control\";\n    if (sps_status[\"MANUAL_CONTROL\"] == 0){\n        msg.payload = \"open\";\n    }\n    else if (sps_status[\"MANUAL_CONTROL\"] == 1){\n        msg.payload = \"close\";\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 400,
        "wires": [
            [
                "efaafe568bfb4d86"
            ]
        ]
    },
    {
        "id": "0384a1cefad6eded",
        "type": "debug",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "last_step",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 240,
        "wires": []
    },
    {
        "id": "aec6da720bfaf1c9",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "PREP_TANK_A (1)",
        "func": "msg.setpoint = {\n    \"V1\":1,\n    \"V2\":1,\n    \"V3\":0,\n    \"V4\":0,\n    \"UPPER_MAGNETIC_VALVE\":0,\n    \"LOWER_MAGNETIC_VALVE\":0,\n    \"PUMP\":0,\n    \"LAST_STEP_NUMBER\":1\n}\nmsg.last_step = \"PREP_TANK_A\";\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 700,
        "wires": [
            [
                "08b16aea6e1ecf5a"
            ]
        ]
    },
    {
        "id": "256eec8858cf897e",
        "type": "switch",
        "z": "fc5cdac23d2176f1",
        "name": "send to modbus ?",
        "property": "send_to_modbus",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 260,
        "wires": [
            [
                "f51cef615bd24a8b"
            ],
            [
                "b4f8a311a0a67a8d",
                "3b08bad32253dde5"
            ]
        ]
    },
    {
        "id": "b4f8a311a0a67a8d",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "prepare modbus com",
        "func": "status = global.get(\"sps_status\");\naddress_list = global.get(\"write_register_address_list\");\npayload = msg.payload;\n\nif (address_list != null && payload != null){\n    let values = [];\n    \n    first_key = Object.keys(address_list)[0]\n    modbus_start_address = Number(address_list[first_key]);\n    quantity = 0\n    \n    \n    for (var key in address_list){\n        if (key.substring(0,3) != \"RO_\"){\n            if (payload[key] == null){ values.push(status[key]); }\n            else { values.push(payload[key]); }\n            quantity++;\n        }\n    }\n\n    msg.payload = { value: values, 'fc': 16, 'unitid': 1, 'address': modbus_start_address , 'quantity': quantity };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 280,
        "wires": [
            [
                "0384a1cefad6eded",
                "e7019d5793eb7a3c",
                "f1464f6f04dbc6d6"
            ]
        ]
    },
    {
        "id": "e7019d5793eb7a3c",
        "type": "modbus-flex-write",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "46220ce9c8d2b07d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "x": 1290,
        "y": 280,
        "wires": [
            [
                "1bb44b60c044c7a6"
            ],
            []
        ]
    },
    {
        "id": "1bb44b60c044c7a6",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "3",
        "fixedDurationUnit": "seconds",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 1490,
        "y": 280,
        "wires": [
            [
                "5b3f560b24fb5f9d"
            ]
        ]
    },
    {
        "id": "d2b6348536724822",
        "type": "inject",
        "z": "fc5cdac23d2176f1",
        "name": "init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 140,
        "wires": [
            [
                "ed899039206fe429"
            ]
        ]
    },
    {
        "id": "3aab87349029d91c",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "VENT_TANK_A (2)",
        "func": "msg.setpoint = {\n    \"V1\":1,\n    \"V2\":1,\n    \"V3\":0,\n    \"V4\":0,\n    \"UPPER_MAGNETIC_VALVE\":1,\n    \"LOWER_MAGNETIC_VALVE\":0,\n    \"PUMP\":1,\n    \"LAST_STEP_NUMBER\":2\n}\nmsg.last_step = \"VENT_TANK_A\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 760,
        "wires": [
            [
                "c675a3c2d8939027"
            ]
        ]
    },
    {
        "id": "9b1ebf5dd8c42039",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "compare setpoint vs status",
        "func": "var setpoint = msg.setpoint;\nvar sps_status = global.get(\"sps_status\") || {};\n\nfor (let x in setpoint){\n    msg.send_to_modbus = false;\n    if (setpoint[x] != sps_status[x]){\n        msg.payload = setpoint;\n        msg.send_to_modbus = true;\n        break;\n    }\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 260,
        "wires": [
            [
                "256eec8858cf897e"
            ]
        ]
    },
    {
        "id": "08b16aea6e1ecf5a",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4"
        ],
        "x": 1545,
        "y": 700,
        "wires": []
    },
    {
        "id": "f3de6e2c8a782af4",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_compare_setpoint_vs_status",
        "links": [
            "08b16aea6e1ecf5a",
            "102061d2f337ed6a",
            "328716cd6abed989",
            "35d2dcdc0c09b776",
            "6ed6d2a657853ea3",
            "9c0c937a16266370",
            "ae81cf90b14ca2fc",
            "bab7164575cbe967",
            "be46f404ee056dc1",
            "c675a3c2d8939027",
            "c86508a8652c1f01",
            "efaafe568bfb4d86",
            "5b3f560b24fb5f9d"
        ],
        "x": 165,
        "y": 260,
        "wires": [
            [
                "305f49232fd5fc40"
            ]
        ]
    },
    {
        "id": "067fcf552e3e4089",
        "type": "switch",
        "z": "fc5cdac23d2176f1",
        "name": "last step -> next step",
        "property": "last_step",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "STOP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DRAIN_SYSTEM_B",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PREP_TANK_A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "VENT_TANK_A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "START_TANK_A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "STOP_TANK_A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DRAIN_SYSTEM_A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PREP_TANK_B",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "VENT_TANK_B",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "START_TANK_B",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "STOP_TANK_B",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 11,
        "x": 260,
        "y": 940,
        "wires": [
            [
                "933d41f139815308"
            ],
            [
                "933d41f139815308"
            ],
            [
                "4ccedf0d14933bc2"
            ],
            [
                "bc3af7420630132b"
            ],
            [
                "cacdb538067b374c"
            ],
            [
                "9e55bf970b56d4f0"
            ],
            [
                "e3e6cb76cc932247"
            ],
            [
                "74d4590945241c7f"
            ],
            [
                "e6939e49c315a278"
            ],
            [
                "3d96962aa0d35d51"
            ],
            [
                "cf92e0e95082f9f1"
            ]
        ]
    },
    {
        "id": "c675a3c2d8939027",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4"
        ],
        "x": 1545,
        "y": 760,
        "wires": []
    },
    {
        "id": "a261aef43d69df05",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "START_TANK_A (3)",
        "func": "msg.setpoint = {\n    \"V1\":1,\n    \"V2\":1,\n    \"V3\":0,\n    \"V4\":0,\n    \"UPPER_MAGNETIC_VALVE\":0,\n    \"LOWER_MAGNETIC_VALVE\":0,\n    \"PUMP\":1,\n    \"LAST_STEP_NUMBER\":3\n}\nmsg.last_step = \"START_TANK_A\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 820,
        "wires": [
            [
                "c86508a8652c1f01"
            ]
        ]
    },
    {
        "id": "82a57fb8f4672bdf",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "STOP_TANK_A (4)",
        "func": "msg.setpoint = {\n    \"V1\":0,\n    \"V2\":0,\n    \"V3\":0,\n    \"V4\":0,\n    \"UPPER_MAGNETIC_VALVE\":0,\n    \"LOWER_MAGNETIC_VALVE\":0,\n    \"PUMP\":0,\n    \"LAST_STEP_NUMBER\":4\n}\n\nmsg.last_step = \"STOP_TANK_A\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 880,
        "wires": [
            [
                "bab7164575cbe967"
            ]
        ]
    },
    {
        "id": "c86508a8652c1f01",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4"
        ],
        "x": 1545,
        "y": 820,
        "wires": []
    },
    {
        "id": "cacdb538067b374c",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "wait for tank switch",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "30",
        "fixedDurationUnit": "minutes",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 770,
        "y": 880,
        "wires": [
            [
                "7d24d1fca437a778"
            ]
        ]
    },
    {
        "id": "bab7164575cbe967",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4"
        ],
        "x": 1545,
        "y": 880,
        "wires": []
    },
    {
        "id": "a60d71b5876da161",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "PREP_TANK_B (6)",
        "func": "msg.setpoint = {\n    \"V1\":0,\n    \"V2\":0,\n    \"V3\":1,\n    \"V4\":1,\n    \"UPPER_MAGNETIC_VALVE\":0,\n    \"LOWER_MAGNETIC_VALVE\":0,\n    \"PUMP\":0,\n    \"LAST_STEP_NUMBER\":6\n}\n\nmsg.last_step = \"PREP_TANK_B\";\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1000,
        "wires": [
            [
                "be46f404ee056dc1"
            ]
        ]
    },
    {
        "id": "1699d5695dbb85ef",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_prep_tank_b",
        "links": [
            "589c6b2eb87e0cee",
            "a7aaff44f887aa6c",
            "4ec8d03409d90866",
            "ea6e0b9bd94ba992"
        ],
        "x": 1235,
        "y": 1000,
        "wires": [
            [
                "a60d71b5876da161"
            ]
        ]
    },
    {
        "id": "b71eaa92f09516af",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "VENT_TANK_B (7)",
        "func": "msg.setpoint = {\n    \"V1\":0,\n    \"V2\":0,\n    \"V3\":1,\n    \"V4\":1,\n    \"UPPER_MAGNETIC_VALVE\":1,\n    \"LOWER_MAGNETIC_VALVE\":0,\n    \"PUMP\":1,\n    \"LAST_STEP_NUMBER\":7\n}\n\nmsg.last_step = \"VENT_TANK_B\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1060,
        "wires": [
            [
                "9c0c937a16266370"
            ]
        ]
    },
    {
        "id": "ebeb605bad12c3a4",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_vent_tank_b",
        "links": [
            "aee9a87c704c7b2d",
            "74d4590945241c7f",
            "9925e568a89caf40"
        ],
        "x": 1235,
        "y": 1060,
        "wires": [
            [
                "b71eaa92f09516af"
            ]
        ]
    },
    {
        "id": "be46f404ee056dc1",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4"
        ],
        "x": 1545,
        "y": 1000,
        "wires": []
    },
    {
        "id": "9c0c937a16266370",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4"
        ],
        "x": 1545,
        "y": 1060,
        "wires": []
    },
    {
        "id": "17fbffa7ddda9528",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "START_TANK_B (8)",
        "func": "msg.setpoint = {\n    \"V1\":0,\n    \"V2\":0,\n    \"V3\":1,\n    \"V4\":1,\n    \"UPPER_MAGNETIC_VALVE\":0,\n    \"LOWER_MAGNETIC_VALVE\":0,\n    \"PUMP\":1,\n    \"LAST_STEP_NUMBER\":8\n}\n\nmsg.last_step = \"START_TANK_B\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1120,
        "wires": [
            [
                "102061d2f337ed6a"
            ]
        ]
    },
    {
        "id": "24e44efd92c3f37f",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "STOP_TANK_B (9)",
        "func": "msg.setpoint = {\n    \"V1\":0,\n    \"V2\":0,\n    \"V3\":0,\n    \"V4\":0,\n    \"UPPER_MAGNETIC_VALVE\":0,\n    \"LOWER_MAGNETIC_VALVE\":0,\n    \"PUMP\":0,\n    \"LAST_STEP_NUMBER\":9\n}\n\nmsg.last_step = \"STOP_TANK_B\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1180,
        "wires": [
            [
                "35d2dcdc0c09b776"
            ]
        ]
    },
    {
        "id": "db55c803415e7fef",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_start_tank_b",
        "links": [
            "f517136c2285c305",
            "2fa81bbebdc6dd16",
            "1d1814c4869e3383"
        ],
        "x": 1235,
        "y": 1120,
        "wires": [
            [
                "17fbffa7ddda9528"
            ]
        ]
    },
    {
        "id": "8a37df7c084d8dd2",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_stop_tank_b",
        "links": [
            "581d8f628ed36d4c",
            "a87d212e25f2c0b4",
            "87ae8e90b449c818"
        ],
        "x": 1235,
        "y": 1180,
        "wires": [
            [
                "24e44efd92c3f37f"
            ]
        ]
    },
    {
        "id": "102061d2f337ed6a",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4"
        ],
        "x": 1545,
        "y": 1120,
        "wires": []
    },
    {
        "id": "35d2dcdc0c09b776",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4"
        ],
        "x": 1545,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f404b40cc7182f4f",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "DRAIN_SYSTEM_A (5)",
        "func": "msg.setpoint = {\n    \"V1\":0,\n    \"V2\":0,\n    \"V3\":0,\n    \"V4\":0,\n    \"UPPER_MAGNETIC_VALVE\":1,\n    \"LOWER_MAGNETIC_VALVE\":1,\n    \"PUMP\":0,\n    \"LAST_STEP_NUMBER\":5\n}\n\nmsg.last_step = \"DRAIN_SYSTEM_A\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 940,
        "wires": [
            [
                "ae81cf90b14ca2fc"
            ]
        ]
    },
    {
        "id": "ae81cf90b14ca2fc",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4"
        ],
        "x": 1545,
        "y": 940,
        "wires": []
    },
    {
        "id": "0db10ac37fef10ae",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "DRAIN_SYSTEM_B (10)",
        "func": "msg.setpoint = {\n    \"V1\":0,\n    \"V2\":0,\n    \"V3\":0,\n    \"V4\":0,\n    \"UPPER_MAGNETIC_VALVE\":1,\n    \"LOWER_MAGNETIC_VALVE\":1,\n    \"PUMP\":0,\n    \"LAST_STEP_NUMBER\":10\n}\n\nmsg.last_step = \"DRAIN_SYSTEM_B\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1240,
        "wires": [
            [
                "6ed6d2a657853ea3"
            ]
        ]
    },
    {
        "id": "cb109462c6006dd5",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_drain_system_b",
        "links": [
            "a94c81812dc27390",
            "e23590948f444e38",
            "0eba332582454372"
        ],
        "x": 1235,
        "y": 1240,
        "wires": [
            [
                "0db10ac37fef10ae"
            ]
        ]
    },
    {
        "id": "6ed6d2a657853ea3",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4"
        ],
        "x": 1545,
        "y": 1240,
        "wires": []
    },
    {
        "id": "74d4590945241c7f",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "ebeb605bad12c3a4"
        ],
        "x": 695,
        "y": 1060,
        "wires": []
    },
    {
        "id": "e23590948f444e38",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "cb109462c6006dd5"
        ],
        "x": 915,
        "y": 1240,
        "wires": []
    },
    {
        "id": "2fa81bbebdc6dd16",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "db55c803415e7fef"
        ],
        "x": 1145,
        "y": 1120,
        "wires": []
    },
    {
        "id": "a87d212e25f2c0b4",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "8a37df7c084d8dd2"
        ],
        "x": 1145,
        "y": 1180,
        "wires": []
    },
    {
        "id": "a7aaff44f887aa6c",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "1699d5695dbb85ef"
        ],
        "x": 1145,
        "y": 1000,
        "wires": []
    },
    {
        "id": "e3e6cb76cc932247",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "wait for drainage",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "30",
        "fixedDurationUnit": "seconds",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 770,
        "y": 1000,
        "wires": [
            [
                "1da53b36ce9d1658"
            ]
        ]
    },
    {
        "id": "bc3af7420630132b",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "wait for ventilation",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "20",
        "fixedDurationUnit": "seconds",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 770,
        "y": 820,
        "wires": [
            [
                "5b048925c18da64a"
            ]
        ]
    },
    {
        "id": "e6939e49c315a278",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "wait for ventilation",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "20",
        "fixedDurationUnit": "seconds",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 770,
        "y": 1120,
        "wires": [
            [
                "2fa81bbebdc6dd16"
            ]
        ]
    },
    {
        "id": "3d96962aa0d35d51",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "wait for tank switch",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "30",
        "fixedDurationUnit": "minutes",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 770,
        "y": 1180,
        "wires": [
            [
                "d7ceed1ff176e709"
            ]
        ]
    },
    {
        "id": "933d41f139815308",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "wait for drainage",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "30",
        "fixedDurationUnit": "seconds",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 760,
        "y": 700,
        "wires": [
            [
                "0fc770a7a61a20d6"
            ]
        ]
    },
    {
        "id": "7f2207b1338bfbce",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_next_step",
        "links": [
            "f51cef615bd24a8b",
            "9fb665ca86aeedc4"
        ],
        "x": 115,
        "y": 940,
        "wires": [
            [
                "067fcf552e3e4089"
            ]
        ]
    },
    {
        "id": "f51cef615bd24a8b",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "7f2207b1338bfbce"
        ],
        "x": 955,
        "y": 240,
        "wires": []
    },
    {
        "id": "9e78e5efe8d26854",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "init flow",
        "func": "var step_list = [\n    \"STOP\",\n    \"PREP_TANK_A\",\n    \"VENT_TANK_A\",\n    \"START_TANK_A\",\n    \"STOP_TANK_A\",\n    \"DRAIN_SYSTEM_A\",\n    \"PREP_TANK_B\",\n    \"VENT_TANK_B\",\n    \"START_TANK_B\",\n    \"STOP_TANK_B\",\n    \"DRAIN_SYSTEM_B\"\n]\n\nvar sps_status = global.get(\"sps_status\") || {};\n\nif (sps_status[\"LAST_STEP_NUMBER\"] == null) { msg.last_step = \"STOP\" }\nelse { msg.last_step = step_list[sps_status[\"LAST_STEP_NUMBER\"]] }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 100,
        "wires": [
            [
                "e038a6df2082acd4"
            ]
        ]
    },
    {
        "id": "2479bec9fcf2f7e6",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "STOP (0)",
        "func": "msg.setpoint = {\n    \"V1\":0,\n    \"V2\":0,\n    \"V3\":0,\n    \"V4\":0,\n    \"UPPER_MAGNETIC_VALVE\":0,\n    \"LOWER_MAGNETIC_VALVE\":0,\n    \"PUMP\":0,\n    \"LAST_STEP_NUMBER\":0\n}\nmsg.last_step = \"STOP\";\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 640,
        "wires": [
            [
                "328716cd6abed989"
            ]
        ]
    },
    {
        "id": "328716cd6abed989",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4"
        ],
        "x": 1545,
        "y": 640,
        "wires": []
    },
    {
        "id": "e038a6df2082acd4",
        "type": "switch",
        "z": "fc5cdac23d2176f1",
        "name": "start from zero ?",
        "property": "last_step",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "STOP",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "STOP",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 140,
        "wires": [
            [
                "7b1c25d509ce3891"
            ],
            [
                "9fb665ca86aeedc4"
            ]
        ]
    },
    {
        "id": "9fb665ca86aeedc4",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "7f2207b1338bfbce",
            "f7619c2e495fa3dd"
        ],
        "x": 1145,
        "y": 160,
        "wires": []
    },
    {
        "id": "7b1c25d509ce3891",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "89e47bb21ad728ec",
            "f7619c2e495fa3dd"
        ],
        "x": 1145,
        "y": 120,
        "wires": []
    },
    {
        "id": "89e47bb21ad728ec",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_stop",
        "links": [
            "7b1c25d509ce3891",
            "305a3dfa24a6645a",
            "c8b5b0133f8aceda",
            "19fd17939dc51414",
            "afa53f4938157af0"
        ],
        "x": 1235,
        "y": 640,
        "wires": [
            [
                "2479bec9fcf2f7e6"
            ]
        ]
    },
    {
        "id": "305f49232fd5fc40",
        "type": "gate",
        "z": "fc5cdac23d2176f1",
        "name": "MANUAL CONTROL LOCK",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 320,
        "y": 260,
        "wires": [
            [
                "9b1ebf5dd8c42039"
            ]
        ]
    },
    {
        "id": "efaafe568bfb4d86",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4",
            "d6168bbf8484dda1"
        ],
        "x": 705,
        "y": 400,
        "wires": []
    },
    {
        "id": "5b3f560b24fb5f9d",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "f3de6e2c8a782af4"
        ],
        "x": 1615,
        "y": 280,
        "wires": []
    },
    {
        "id": "7607d33bb7083ee7",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "16155fa536f4666b"
        ],
        "x": 885,
        "y": 940,
        "wires": []
    },
    {
        "id": "16155fa536f4666b",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_drain_system_a",
        "links": [
            "771e28bbd3b0f699",
            "7607d33bb7083ee7",
            "5d6e9ffa65c2d433"
        ],
        "x": 1235,
        "y": 940,
        "wires": [
            [
                "f404b40cc7182f4f"
            ]
        ]
    },
    {
        "id": "65a8deac56c2d5b8",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_stop_tank_a",
        "links": [
            "0631b036b571692c",
            "bf0ad0cb547fd2f5",
            "4eaeb80e04754d90"
        ],
        "x": 1235,
        "y": 880,
        "wires": [
            [
                "82a57fb8f4672bdf"
            ]
        ]
    },
    {
        "id": "bf0ad0cb547fd2f5",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "NEXT",
        "mode": "link",
        "links": [
            "65a8deac56c2d5b8"
        ],
        "x": 1145,
        "y": 880,
        "wires": []
    },
    {
        "id": "a73881ed293b6a9c",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_start_tank_a",
        "links": [
            "cd1aba664ac13ccb",
            "5b048925c18da64a",
            "9f193477211885cf"
        ],
        "x": 1235,
        "y": 820,
        "wires": [
            [
                "a261aef43d69df05"
            ]
        ]
    },
    {
        "id": "5b048925c18da64a",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "a73881ed293b6a9c"
        ],
        "x": 1145,
        "y": 820,
        "wires": []
    },
    {
        "id": "4ccedf0d14933bc2",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "bc844aff20fcc420"
        ],
        "x": 695,
        "y": 760,
        "wires": []
    },
    {
        "id": "bc844aff20fcc420",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_vent_tank_a",
        "links": [
            "4ccedf0d14933bc2",
            "b31cf7f606cd7882",
            "5c7d92749b63e22b"
        ],
        "x": 1235,
        "y": 760,
        "wires": [
            [
                "3aab87349029d91c"
            ]
        ]
    },
    {
        "id": "9043510d7358b9aa",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_prep_tank_a",
        "links": [
            "057b3ea3569b600b",
            "af9e2f55321b0dd7",
            "665c58bb0967f62e",
            "70a5b7d6091520aa"
        ],
        "x": 1235,
        "y": 700,
        "wires": [
            [
                "aec6da720bfaf1c9"
            ]
        ]
    },
    {
        "id": "af9e2f55321b0dd7",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "9043510d7358b9aa"
        ],
        "x": 1145,
        "y": 700,
        "wires": []
    },
    {
        "id": "1d6e67eefea1a621",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_init_logic_flow",
        "links": [
            "d53c12f54431f534"
        ],
        "x": 265,
        "y": 100,
        "wires": [
            [
                "ed899039206fe429"
            ]
        ]
    },
    {
        "id": "566b5fa2b85451f2",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "links": [
            "1e92fe032d794fdd"
        ],
        "x": 345,
        "y": 580,
        "wires": [
            [
                "933d41f139815308"
            ]
        ]
    },
    {
        "id": "c80f0da0cf93359f",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "links": [
            "f793e3594fa89031",
            "1e92fe032d794fdd"
        ],
        "x": 345,
        "y": 620,
        "wires": [
            [
                "bc3af7420630132b"
            ]
        ]
    },
    {
        "id": "c7da9b29bbe395b3",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "links": [
            "f793e3594fa89031",
            "1e92fe032d794fdd"
        ],
        "x": 345,
        "y": 700,
        "wires": [
            [
                "e3e6cb76cc932247"
            ]
        ]
    },
    {
        "id": "1dc07513645c2c76",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "links": [
            "f793e3594fa89031",
            "1e92fe032d794fdd"
        ],
        "x": 345,
        "y": 740,
        "wires": [
            [
                "e6939e49c315a278"
            ]
        ]
    },
    {
        "id": "d7e555ae07d79d7e",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "links": [
            "f793e3594fa89031",
            "1e92fe032d794fdd"
        ],
        "x": 345,
        "y": 780,
        "wires": [
            [
                "3d96962aa0d35d51"
            ]
        ]
    },
    {
        "id": "da0d9b2916454109",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "links": [
            "f793e3594fa89031",
            "1e92fe032d794fdd"
        ],
        "x": 345,
        "y": 660,
        "wires": [
            [
                "cacdb538067b374c"
            ]
        ]
    },
    {
        "id": "ed899039206fe429",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "5",
        "fixedDurationUnit": "seconds",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 530,
        "y": 140,
        "wires": [
            [
                "9e78e5efe8d26854"
            ]
        ]
    },
    {
        "id": "1e92fe032d794fdd",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "566b5fa2b85451f2",
            "c80f0da0cf93359f",
            "da0d9b2916454109",
            "c7da9b29bbe395b3",
            "1dc07513645c2c76",
            "d7e555ae07d79d7e"
        ],
        "x": 705,
        "y": 460,
        "wires": []
    },
    {
        "id": "422253a73b4f16b4",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "drop queues ?",
        "func": "sps_status = global.get(\"sps_status\") || {};\nif (sps_status[\"MANUAL_CONTROL\"] == 1){\n    msg.drop = 1;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 460,
        "wires": [
            [
                "1e92fe032d794fdd"
            ]
        ]
    },
    {
        "id": "3b08bad32253dde5",
        "type": "delay",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1020,
        "y": 340,
        "wires": [
            [
                "9dcb6c8fb703a15a"
            ]
        ]
    },
    {
        "id": "c27708addc2094ec",
        "type": "modbus-flex-write",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "46220ce9c8d2b07d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "x": 1530,
        "y": 340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9dcb6c8fb703a15a",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "Sim Feedback",
        "func": "status = global.get(\"sps_status\");\naddress_list = global.get(\"feedback_register_address_list\");\npayload = msg.payload;\n\nif (address_list != null && payload != null){\n    let values = [];\n    \n    first_key = Object.keys(address_list)[0]\n    modbus_start_address = Number(address_list[first_key]);\n    quantity = 0\n    \n    \n    for (var key in address_list){\n        if (key.substring(0,3) != \"RO_\"){\n            if (payload[key] == null){ values.push(status[key]); }\n            else { values.push(payload[key]); }\n            quantity++;\n        }\n    }\n\n    msg.payload = { value: values, 'fc': 16, 'unitid': 1, 'address': modbus_start_address , 'quantity': quantity };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 340,
        "wires": [
            [
                "c27708addc2094ec"
            ]
        ]
    },
    {
        "id": "f1464f6f04dbc6d6",
        "type": "debug",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 140,
        "wires": []
    },
    {
        "id": "5b2379b9d583eea8",
        "type": "debug",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1480,
        "wires": []
    },
    {
        "id": "353f98a299adb3cf",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "prepare modbus com",
        "func": "var status = global.get(\"sps_status\");\nvar address_list = global.get(\"write_register_address_list\");\nvar payload = msg.payload;\n\nif (address_list != null && payload != null){\n    let values = [];\n    \n    let first_key = Object.keys(address_list)[0]\n    let modbus_start_address = Number(address_list[first_key]);\n    let quantity = 0\n    \n    \n    for (var key in address_list){\n        if (key.substring(0,3) != \"RO_\"){\n            if (payload[key] == null){ values.push(status[key]); }\n            else { values.push(payload[key]); }\n            quantity++;\n        }\n    }\n\n    msg.payload = { value: values, 'fc': 16, 'unitid': 1, 'address': modbus_start_address , 'quantity': quantity };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1520,
        "wires": [
            [
                "5b2379b9d583eea8",
                "99e4654416742705"
            ]
        ]
    },
    {
        "id": "99e4654416742705",
        "type": "modbus-flex-write",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "46220ce9c8d2b07d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "x": 1190,
        "y": 1520,
        "wires": [
            [
                "7fb1adb86bfd8920"
            ],
            []
        ]
    },
    {
        "id": "7fb1adb86bfd8920",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "10",
        "fixedDurationUnit": "seconds",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 1390,
        "y": 1520,
        "wires": [
            [
                "c80c6bef10df89f9"
            ]
        ]
    },
    {
        "id": "3f24eb58db5eb179",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "compare setpoint vs status",
        "func": "var setpoint = msg.setpoint;\nvar sps_status = global.get(\"sps_status\") || {};\n\nfor (let x in setpoint){\n    msg.send_to_modbus = false;\n    if (setpoint[x] != sps_status[x]){\n        msg.payload = setpoint;\n        msg.send_to_modbus = true;\n        break;\n    }\n}\nif(msg.send_to_modbus){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1520,
        "wires": [
            [
                "353f98a299adb3cf",
                "877267732df19552",
                "ed99c88cb27711c5"
            ]
        ]
    },
    {
        "id": "c80c6bef10df89f9",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "d6168bbf8484dda1"
        ],
        "x": 1565,
        "y": 1520,
        "wires": []
    },
    {
        "id": "877267732df19552",
        "type": "delay",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 1580,
        "wires": [
            [
                "9aa8c8f338affa42"
            ]
        ]
    },
    {
        "id": "2d814f764aaa5b56",
        "type": "modbus-flex-write",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "46220ce9c8d2b07d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "x": 1430,
        "y": 1580,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9aa8c8f338affa42",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "Sim Feedback",
        "func": "var status = global.get(\"sps_status\");\nvar address_list = global.get(\"feedback_register_address_list\");\nvar payload = msg.payload;\n\nif (address_list != null && payload != null){\n    let values = [];\n    \n    let first_key = Object.keys(address_list)[0]\n    let modbus_start_address = Number(address_list[first_key]);\n    let quantity = 0\n    \n    \n    for (var key in address_list){\n        if (key.substring(0,3) != \"RO_\"){\n            if (payload[key] == null){ values.push(status[key]); }\n            else { values.push(payload[key]); }\n            quantity++;\n        }\n    }\n\n    msg.payload = { value: values, 'fc': 16, 'unitid': 1, 'address': modbus_start_address , 'quantity': quantity };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1580,
        "wires": [
            [
                "2d814f764aaa5b56"
            ]
        ]
    },
    {
        "id": "092327f8cdceff27",
        "type": "gate",
        "z": "fc5cdac23d2176f1",
        "name": "MANUAL CONTROL LOCK",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 420,
        "y": 1520,
        "wires": [
            [
                "3f24eb58db5eb179"
            ]
        ]
    },
    {
        "id": "d6168bbf8484dda1",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "links": [
            "efaafe568bfb4d86",
            "a230a45844c03da4",
            "c80c6bef10df89f9"
        ],
        "x": 245,
        "y": 1520,
        "wires": [
            [
                "092327f8cdceff27"
            ]
        ]
    },
    {
        "id": "ed99c88cb27711c5",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_out_auto_setpoint_to_rest",
        "mode": "link",
        "links": [
            "c76a6fae6adc5754"
        ],
        "x": 855,
        "y": 1480,
        "wires": []
    },
    {
        "id": "82032b48128df29a",
        "type": "link in",
        "z": "fc5cdac23d2176f1",
        "name": "lnk_in_drop_queues",
        "links": [
            "cd97a9d5c0d13929"
        ],
        "x": 485,
        "y": 500,
        "wires": [
            [
                "1e92fe032d794fdd"
            ]
        ]
    },
    {
        "id": "7d24d1fca437a778",
        "type": "switch",
        "z": "fc5cdac23d2176f1",
        "name": "loop in a",
        "property": "modes.operating_mode",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 980,
        "y": 880,
        "wires": [
            [
                "9df74c83bebfc649"
            ],
            [
                "bf0ad0cb547fd2f5"
            ]
        ]
    },
    {
        "id": "9df74c83bebfc649",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "1",
        "fixedDurationUnit": "minutes",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 990,
        "y": 840,
        "wires": [
            [
                "7d24d1fca437a778"
            ]
        ]
    },
    {
        "id": "d7ceed1ff176e709",
        "type": "switch",
        "z": "fc5cdac23d2176f1",
        "name": "loop in b",
        "property": "modes.operating_mode",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 980,
        "y": 1180,
        "wires": [
            [
                "3e0c2e32c79f827b"
            ],
            [
                "a87d212e25f2c0b4"
            ]
        ]
    },
    {
        "id": "3e0c2e32c79f827b",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "1",
        "fixedDurationUnit": "minutes",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 990,
        "y": 1140,
        "wires": [
            [
                "d7ceed1ff176e709"
            ]
        ]
    },
    {
        "id": "47e2da4e5df8e24b",
        "type": "function",
        "z": "fc5cdac23d2176f1",
        "name": "skip long waits unless cycle mode",
        "func": "var modes = global.get(\"modes\");\nif (modes[\"operating_mode\"] != 0) {\n    msg.flush = true;\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1160,
        "wires": [
            [
                "cacdb538067b374c",
                "3d96962aa0d35d51"
            ]
        ]
    },
    {
        "id": "ea341353838f7b11",
        "type": "inject",
        "z": "fc5cdac23d2176f1",
        "name": "check current operating-mode",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 1100,
        "wires": [
            [
                "47e2da4e5df8e24b"
            ]
        ]
    },
    {
        "id": "7b73ebb62e723494",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "1",
        "fixedDurationUnit": "minutes",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 1010,
        "y": 960,
        "wires": [
            [
                "1da53b36ce9d1658"
            ]
        ]
    },
    {
        "id": "0fc770a7a61a20d6",
        "type": "switch",
        "z": "fc5cdac23d2176f1",
        "name": "loop drainage",
        "property": "modes.operating_mode",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 980,
        "y": 700,
        "wires": [
            [
                "9709e5be2c3b5a77"
            ],
            [
                "c38d45beef283344"
            ]
        ]
    },
    {
        "id": "9709e5be2c3b5a77",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "1",
        "fixedDurationUnit": "minutes",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 990,
        "y": 660,
        "wires": [
            [
                "0fc770a7a61a20d6"
            ]
        ]
    },
    {
        "id": "1da53b36ce9d1658",
        "type": "switch",
        "z": "fc5cdac23d2176f1",
        "name": "loop drainage",
        "property": "modes.operating_mode",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 960,
        "y": 1000,
        "wires": [
            [
                "7b73ebb62e723494"
            ],
            [
                "7d15ec0bf2d3cb47"
            ]
        ]
    },
    {
        "id": "c38d45beef283344",
        "type": "switch",
        "z": "fc5cdac23d2176f1",
        "name": "a or b",
        "property": "modes.operating_mode",
        "propertyType": "global",
        "rules": [
            {
                "t": "neq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 740,
        "wires": [
            [
                "af9e2f55321b0dd7"
            ],
            [
                "ea6e0b9bd94ba992"
            ]
        ]
    },
    {
        "id": "ea6e0b9bd94ba992",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "1699d5695dbb85ef"
        ],
        "x": 1145,
        "y": 740,
        "wires": []
    },
    {
        "id": "7d15ec0bf2d3cb47",
        "type": "switch",
        "z": "fc5cdac23d2176f1",
        "name": "b or a",
        "property": "modes.operating_mode",
        "propertyType": "global",
        "rules": [
            {
                "t": "neq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 1040,
        "wires": [
            [
                "a7aaff44f887aa6c"
            ],
            [
                "70a5b7d6091520aa"
            ]
        ]
    },
    {
        "id": "70a5b7d6091520aa",
        "type": "link out",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "mode": "link",
        "links": [
            "9043510d7358b9aa"
        ],
        "x": 1145,
        "y": 1040,
        "wires": []
    },
    {
        "id": "cf92e0e95082f9f1",
        "type": "switch",
        "z": "fc5cdac23d2176f1",
        "name": "loop in stop",
        "property": "modes.operating_mode",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 1240,
        "wires": [
            [
                "b677460855668619"
            ],
            [
                "e23590948f444e38"
            ]
        ]
    },
    {
        "id": "b677460855668619",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "1",
        "fixedDurationUnit": "minutes",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 770,
        "y": 1280,
        "wires": [
            [
                "cf92e0e95082f9f1"
            ]
        ]
    },
    {
        "id": "9e55bf970b56d4f0",
        "type": "switch",
        "z": "fc5cdac23d2176f1",
        "name": "loop in stop",
        "property": "modes.operating_mode",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 920,
        "wires": [
            [
                "52a2391547363646"
            ],
            [
                "7607d33bb7083ee7"
            ]
        ]
    },
    {
        "id": "52a2391547363646",
        "type": "chronos-delay",
        "z": "fc5cdac23d2176f1",
        "name": "",
        "config": "3cfcee9f07bdf583",
        "delayType": "fixedDuration",
        "fixedDuration": "1",
        "fixedDurationUnit": "minutes",
        "randomDuration1": "1",
        "randomDuration2": "5",
        "randomDurationUnit": "seconds",
        "randomizerMillis": false,
        "whenType": "time",
        "whenValue": "",
        "offset": "0",
        "random": false,
        "customDelayType": "jsonata",
        "customDelayValue": "",
        "preserveCtrlProps": false,
        "ignoreCtrlProps": false,
        "x": 770,
        "y": 960,
        "wires": [
            [
                "9e55bf970b56d4f0"
            ]
        ]
    },
    {
        "id": "3659d24f9e27841c",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "e557b21c74ad09ac",
        "type": "http response",
        "z": "188f3d12c338cf2e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 970,
        "y": 320,
        "wires": []
    },
    {
        "id": "df3d67198926b044",
        "type": "function",
        "z": "188f3d12c338cf2e",
        "name": "getSystemResponse",
        "func": "var sps_status = global.get(\"sps_status\");\nvar rest_response = flow.get(\"rest_response\");\nvar map_endpoint_to_response = flow.get(\"map_endpoint_to_response\");\nvar map_response_to_status = flow.get(\"map_response_to_status\");\n\nvar getOperatingModeString = function(mode_number) {\n    switch (mode_number) {\n        case 0:\n            return \"AUTOMATIC_CYCLE\";\n        case 1:\n            return \"MEASURE_TANK_A\";\n        case 2:\n            return \"MEASURE_TANK_B\";\n        case 3:\n            return \"DRAIN_SENSOR\";\n        case 4:\n            return \"STOP\";\n    }\n}\n\n/* returns the corresponding name for a given step number */\nvar getStatusString = function (step_number) {\n    switch (step_number) {\n        case 0:\n            return \"STOP\";\n        case 1:\n            return \"PREP_TANK_A\";\n        case 2:\n            return \"VENT_TANK_A\";\n        case 3:\n            return \"RUN_TANK_A\";\n        case 4:\n            return \"STOP_TANK_A\";\n        case 5:\n            return \"DRAIN_TANK_A\";\n        case 6:\n            return \"PREP_TANK_B\";\n        case 7:\n            return \"VENT_TANK_B\";\n        case 8:\n            return \"RUN_TANK_B\";\n        case 9:\n            return \"STOP_TANK_B\";\n        case 10:\n            return \"DRAIN_TANK_B\";\n    }\n}\n\n/* recursively fill the response object from current sps_status\n    using the given mapping*/\nvar fillResponseFromSpsStatus = function(response, map) {\n    for (let key in response){\n        // if current parameter is object fill its nested parameters\n        if (typeof response[key] === 'object' && response[key] !== null) {\n            fillResponseFromSpsStatus(response[key], map[key]);\n        }\n        // if current parameter is a simple value assign it and break recursion\n        else{\n            // if the value should not be copied from sps-status, but instead from the current setpoint etc.\n            // it maps to -1\n            if(map[key] !== -1){\n                // special handling of auto-tide and operating mode\n                if (key === \"auto_tide\" || key === \"operating_mode\") {\n                    let modes = global.get(\"modes\");\n                    response[key] = modes[map[key]];\n                    if (key === \"operating_mode\") {\n                        response[key] = getOperatingModeString(response[key]);\n                    }\n                }\n                else{\n                    response[key] = sps_status[map[key]];\n                \n                    // replace step number with status string\n                    if(key === \"state\"){\n                        response[key] = getStatusString(response[key]);\n                    }\n                }\n            }\n        }\n    }\n    //node.warn(response);\n    return response;\n}\n\n/* return the nested object for a request with given url */\nvar extractSpecificResponse = function(url) {\n    var response = RED.util.cloneMessage(rest_response);\n\n    // remove trailing slashes\n    url = url.endsWith('/') ? url.slice(0, -1) : url;\n\n    // get the path to the nested parameter\n    var path = map_endpoint_to_response[url].split(\".\");\n    // select the requested nested parameter\n    //node.warn(path);\n    for(let index in path){\n        response = response[path[index]];\n        if(response === null){\n            msg.statusCode = 500;\n        }\n    }\n\n    // return the response as the key-value pair from the full response-json\n    return {[path.at(-1)]: response};\n}\n\nfillResponseFromSpsStatus(rest_response, map_response_to_status);\n\n//unless something goes wrong set response status to OK\nmsg.statusCode = 200\nmsg.payload = extractSpecificResponse(msg.req.url);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "e557b21c74ad09ac"
            ]
        ]
    },
    {
        "id": "64ce7197e83effd7",
        "type": "inject",
        "z": "188f3d12c338cf2e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 40,
        "wires": [
            [
                "38ebe3a6bd75e794",
                "76e41250122a7b0d",
                "c797ee2da7456504"
            ]
        ]
    },
    {
        "id": "38ebe3a6bd75e794",
        "type": "template",
        "z": "188f3d12c338cf2e",
        "name": "rest_response",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"system\": {\n        \"operating_mode\": null,\n        \"state\": null,\n        \"pump\": null,\n        \"valves\": {\n            \"main_a\": null,\n            \"main_b\": null,\n            \"upper\": null,\n            \"lower\": null\n        },\n        \"sensor\": {\n            \"temperature\": null,\n            \"salinity\": null,\n            \"o2_concentration\": null,\n            \"acidity\": null\n        },\n        \"tank_a\": {\n            \"platform_position\": {\n                \"auto_tide\": null,\n                \"target\": null,\n                \"current\": null\n            },\n            \"temperature\": {\n                \"target\": null,\n                \"current\": null\n            },\n            \"salinity\": null,\n            \"o2_concentration\": null,\n            \"acidity\": null\n        },\n        \"tank_b\": {\n            \"platform_position\": {\n                \"auto_tide\": null,\n                \"target\": null,\n                \"current\": null\n            },\n            \"temperature\": {\n                \"target\": null,\n                \"current\": null\n            },\n            \"salinity\": null,\n            \"o2_concentration\": null,\n            \"acidity\": null\n        }\n    },\n    \"configuration\": {\n        \"timing\": {\n            \"tank_switch_interval\": null,\n            \"empty_duration\": null,\n            \"temp_check_interval\": null\n        },\n        \"modbus\": {\n            \"heartbeat_interval\": null,\n            \"publish_interval\": null,\n            \"read_interval\": null\n        }\n    }\n}",
        "output": "json",
        "x": 320,
        "y": 40,
        "wires": [
            [
                "9dc52c24123445f5"
            ]
        ]
    },
    {
        "id": "6d9edf53bede6d75",
        "type": "function",
        "z": "188f3d12c338cf2e",
        "name": "fill_rest_response_from_setpoint",
        "func": "var rest_response = flow.get(\"rest_response\");\n\nfor (let x in msg.setpoint) {\n    switch (x) {\n        case \"TIDE_A\":\n            rest_response[\"system\"][\"tank_a\"][\"platform_position\"][\"target\"] = msg.setpoint[x];\n            break;\n        case \"TIDE_B\":\n            rest_response[\"system\"][\"tank_b\"][\"platform_position\"][\"target\"] = msg.setpoint[x];\n            break;\n        case \"TEMP_SETPOINT_A\":\n            rest_response[\"system\"][\"tank_a\"][\"temperature\"][\"target\"] = parseFloat((0.01 * msg.setpoint[x]).toFixed(2));\n            break;\n        case \"TEMP_SETPOINT_B\":\n            rest_response[\"system\"][\"tank_b\"][\"temperature\"][\"target\"] = parseFloat((0.01 * msg.setpoint[x]).toFixed(2));\n            break;\n    }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c76a6fae6adc5754",
        "type": "link in",
        "z": "188f3d12c338cf2e",
        "name": "fill_rest_response",
        "links": [
            "cca8f02bd5f0d641",
            "ed99c88cb27711c5"
        ],
        "x": 185,
        "y": 160,
        "wires": [
            [
                "6d9edf53bede6d75"
            ]
        ]
    },
    {
        "id": "f8f0d0134a3cb955",
        "type": "http response",
        "z": "188f3d12c338cf2e",
        "name": "",
        "statusCode": "501",
        "headers": {},
        "x": 860,
        "y": 1880,
        "wires": []
    },
    {
        "id": "f94a70e73b2b29ec",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 400,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "e9338fcb405f81c7",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/pump",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 440,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "ba3f858a9fb72d59",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/valves",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 480,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "332e80d8b97154de",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/valves/main-a",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 520,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "b60a447c44e02de0",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/valves/main-b",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 560,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "a39285631c628c90",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/valves/upper",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 600,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "0f6c75fb0f5df150",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/valves/lower",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 640,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "c57f73cec4862dfb",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/sensor",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "7c6f1c604677ef5f",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/sensor/temperature",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 720,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "17353c6ee556e9d2",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/sensor/salinity",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 760,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "57c6a3e4c0a6c1e6",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/sensor/o2-concentration",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 800,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "2a08e3316ffc31df",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/sensor/acidity",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 840,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "7a71c405324d7665",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 880,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "820073c8e20c4c91",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/platform-position",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 920,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "0fa1d0b89eaed162",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/platform-position/target",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 1000,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "1b7c2df2f4b193b7",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/platform-position/current",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 1040,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "74e7d271bfecdd4e",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/temperature",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 1080,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "1a392e9804f10ff0",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/temperature/target",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 1120,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "fc3343701864edcd",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/temperature/current",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 1160,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "f69410fc29d5337b",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1320,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "4cf562e22f06b113",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/platform-position",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 1360,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "ef691afc947388c2",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/platform-position/target",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 1440,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "ca3a7cfc60531188",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/platform-position/current",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 1480,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "3a6efb3ceb16d00c",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/temperature",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 1520,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "4609057d2c8b8171",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/temperature/target",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 1560,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "318f50eff35fc9ee",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/temperature/current",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 1600,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "ca148de571f18f8a",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "ece901707e5cce1b"
            ]
        ]
    },
    {
        "id": "5e56250982326c47",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1800,
        "wires": [
            [
                "ece901707e5cce1b"
            ]
        ]
    },
    {
        "id": "65fb8c99369ec914",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/tank-switch-interval",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 1840,
        "wires": [
            [
                "ece901707e5cce1b"
            ]
        ]
    },
    {
        "id": "6685731a163ef0a0",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/empty-duration",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 1880,
        "wires": [
            [
                "ece901707e5cce1b"
            ]
        ]
    },
    {
        "id": "24992db225e80995",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/temp-check-interval",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 1920,
        "wires": [
            [
                "ece901707e5cce1b"
            ]
        ]
    },
    {
        "id": "424bb5767272e0c0",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/modbus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 1960,
        "wires": [
            [
                "ece901707e5cce1b"
            ]
        ]
    },
    {
        "id": "4d42abc2790b0d6d",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/modbus/heartbeat-interval",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 2000,
        "wires": [
            [
                "ece901707e5cce1b"
            ]
        ]
    },
    {
        "id": "ba830c4574288d75",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/modbus/publish-interval",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 2040,
        "wires": [
            [
                "ece901707e5cce1b"
            ]
        ]
    },
    {
        "id": "86fa835469535f1f",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/modbus/read-interval",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 2080,
        "wires": [
            [
                "ece901707e5cce1b"
            ]
        ]
    },
    {
        "id": "76e41250122a7b0d",
        "type": "template",
        "z": "188f3d12c338cf2e",
        "name": "rest_response mapping to sps_status",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"system\": {\n        \"operating_mode\": \"operating_mode\",\n        \"state\": \"LAST_STEP_NUMBER\",\n        \"pump\": \"PUMP\",\n        \"valves\": {\n            \"main_a\": \"V1\",\n            \"main_b\": \"V3\",\n            \"upper\": \"UPPER_MAGNETIC_VALVE\",\n            \"lower\": \"LOWER_MAGNETIC_VALVE\"\n        },\n        \"sensor\": {\n            \"temperature\": \"RO_TEMP\",\n            \"salinity\": \"RO_COND\",\n            \"o2_concentration\": \"RO_OXYGEN\",\n            \"acidity\": \"RO_PH\"\n        },\n        \"tank_a\": {\n            \"platform_position\": {\n                \"auto_tide\": \"auto_tide_a\",\n                \"target\": -1,\n                \"current\": \"TIDE_A\"\n            },\n            \"temperature\": {\n                \"target\": -1,\n                \"current\": -1\n            },\n            \"salinity\": -1,\n            \"o2_concentration\": -1,\n            \"acidity\": -1\n        },\n        \"tank_b\": {\n            \"platform_position\": {\n                \"auto_tide\": \"auto_tide_b\",\n                \"target\": -1,\n                \"current\": \"TIDE_B\"\n            },\n            \"temperature\": {\n                \"target\": -1,\n                \"current\": -1\n            },\n            \"salinity\": -1,\n            \"o2_concentration\": -1,\n            \"acidity\": -1\n        }\n    },\n    \"configuration\": {\n        \"timing\": {\n            \"tank_switch_interval\": -1,\n            \"empty_duration\": -1,\n            \"temp_check_interval\": -1\n        },\n        \"modbus\": {\n            \"heartbeat_interval\": -1,\n            \"publish_interval\": -1,\n            \"read_interval\": -1\n        }\n    }\n}",
        "output": "json",
        "x": 390,
        "y": 80,
        "wires": [
            [
                "f15462676c62d327"
            ]
        ]
    },
    {
        "id": "c797ee2da7456504",
        "type": "template",
        "z": "188f3d12c338cf2e",
        "name": "mapping http-endpoints to rest_response",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"/system\": \"system\",\n    \"/system/operating-mode\": \"system.operating_mode\",\n    \"/system/state\": \"system.state\",\n    \"/system/pump\": \"system.pump\",\n    \"/system/valves\": \"system.valves\",\n    \"/system/valves/main-a\": \"system.valves.main_a\",\n    \"/system/valves/main-b\": \"system.valves.main_b\",\n    \"/system/valves/upper\": \"system.valves.upper\",\n    \"/system/valves/lower\": \"system.valves.lower\",\n    \"/system/sensor\": \"system.sensor\",\n    \"/system/sensor/temperature\": \"system.sensor.temperature\",\n    \"/system/sensor/salinity\": \"system.sensor.salinity\",\n    \"/system/sensor/o2-concentration\": \"system.sensor.o2_concentration\",\n    \"/system/sensor/acidity\": \"system.sensor.acidity\",\n    \"/system/tank-a\": \"system.tank_a\",\n    \"/system/tank-a/platform-position\": \"system.tank_a.platform_position\",\n    \"/system/tank-a/platform-position/auto-tide\": \"system.tank_a.platform_position.auto_tide\",\n    \"/system/tank-a/platform-position/target\": \"system.tank_a.platform_position.target\",\n    \"/system/tank-a/platform-position/current\": \"system.tank_a.platform_position.current\",\n    \"/system/tank-a/temperature\": \"system.tank_a.temperature\",\n    \"/system/tank-a/temperature/target\": \"system.tank_a.temperature.target\",\n    \"/system/tank-a/temperature/current\": \"system.tank_a.temperature.current\",\n    \"/system/tank-a/salinity\": \"system.tank_a.salinity\",\n    \"/system/tank-a/o2-concentration\": \"system.tank_a.o2_concentration\",\n    \"/system/tank-a/acidity\": \"system.tank_a.acidity\",\n    \"/system/tank-b\": \"system.tank_b\",\n    \"/system/tank-b/platform-position\": \"system.tank_b.platform_position\",\n    \"/system/tank-b/platform-position/auto-tide\": \"system.tank_b.platform_position.auto_tide\",\n    \"/system/tank-b/platform-position/target\": \"system.tank_b.platform_position.target\",\n    \"/system/tank-b/platform-position/current\": \"system.tank_b.platform_position.current\",\n    \"/system/tank-b/temperature\": \"system.tank_b.temperature\",\n    \"/system/tank-b/temperature/target\": \"system.tank_b.temperature.target\",\n    \"/system/tank-b/temperature/current\": \"system.tank_b.temperature.current\",\n    \"/system/tank-b/salinity\": \"system.tank_b.salinity\",\n    \"/system/tank-b/o2-concentration\": \"system.tank_b.o2_concentration\",\n    \"/system/tank-b/acidity\": \"system.tank_b.acidity\",\n    \"/configuration\": \"configuration\",\n    \"/configuration/timing\": \"configuration.timing\",\n    \"/configuration/timing/tank-switch-interval\": \"configuration.timing.tank_switch_interval\",\n    \"/configuration/timing/empty-duration\": \"configuration.timing.empty_duration\",\n    \"/configuration/timing/temp-check-interval\": \"configuration.timing.temp_check_interval\",\n    \"/configuration/timing/modbus\": \"configuration.modbus\",\n    \"/configuration/timing/modbus/heartbeat-interval\": \"configuration.modbus.heartbeat_interval\",\n    \"/configuration/timing/modbus/publish-interval\": \"configuration.modbus.publish_interval\",\n    \"/configuration/timing/modbus/read-interval\": \"configuration.modbus.read_interval\"\n}",
        "output": "json",
        "x": 400,
        "y": 120,
        "wires": [
            [
                "412d43da805157ce"
            ]
        ]
    },
    {
        "id": "9dc52c24123445f5",
        "type": "change",
        "z": "188f3d12c338cf2e",
        "name": "to flow.rest_response",
        "rules": [
            {
                "t": "set",
                "p": "rest_response",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f15462676c62d327",
        "type": "change",
        "z": "188f3d12c338cf2e",
        "name": "to flow.map_response_to_status",
        "rules": [
            {
                "t": "set",
                "p": "map_response_to_status",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "412d43da805157ce",
        "type": "change",
        "z": "188f3d12c338cf2e",
        "name": "to flow.map_endpoint_to_response",
        "rules": [
            {
                "t": "set",
                "p": "map_endpoint_to_response",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "e4c140f47f23b22b",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1190,
        "y": 320,
        "wires": [
            [
                "6663b6f250cd0867"
            ]
        ]
    },
    {
        "id": "6201dcb5dc592fa2",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/state",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1230,
        "y": 400,
        "wires": [
            [
                "6663b6f250cd0867"
            ]
        ]
    },
    {
        "id": "38d5876a6ce7793d",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/pump",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1230,
        "y": 440,
        "wires": [
            [
                "fb6998e367682f07"
            ]
        ]
    },
    {
        "id": "ae5b26a4c9fb8cb2",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/valves",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1230,
        "y": 480,
        "wires": [
            [
                "fb6998e367682f07"
            ]
        ]
    },
    {
        "id": "ea215119737aa0ce",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/valves/main-a",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1270,
        "y": 520,
        "wires": [
            [
                "fb6998e367682f07"
            ]
        ]
    },
    {
        "id": "1446435858628846",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/valves/main-b",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1270,
        "y": 560,
        "wires": [
            [
                "fb6998e367682f07"
            ]
        ]
    },
    {
        "id": "41e50303bba02aaa",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/valves/upper",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1270,
        "y": 600,
        "wires": [
            [
                "fb6998e367682f07"
            ]
        ]
    },
    {
        "id": "19593f2b03781926",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/valves/lower",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1270,
        "y": 640,
        "wires": [
            [
                "fb6998e367682f07"
            ]
        ]
    },
    {
        "id": "dc4584d9cb9af07e",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1230,
        "y": 680,
        "wires": [
            [
                "fb6998e367682f07"
            ]
        ]
    },
    {
        "id": "873d36eb12d99ec1",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/platform-position",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1300,
        "y": 720,
        "wires": [
            [
                "4b4fe194e5a293bb"
            ]
        ]
    },
    {
        "id": "3d0aff6e59793ace",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/platform-position/target",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1340,
        "y": 800,
        "wires": [
            [
                "4b4fe194e5a293bb"
            ]
        ]
    },
    {
        "id": "4be4f403720805a2",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/temperature",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1290,
        "y": 840,
        "wires": [
            [
                "4b4fe194e5a293bb"
            ]
        ]
    },
    {
        "id": "a4d5036a182cce81",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/temperature/target",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1330,
        "y": 880,
        "wires": [
            [
                "4b4fe194e5a293bb"
            ]
        ]
    },
    {
        "id": "dcf7e4d21361d68e",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1230,
        "y": 920,
        "wires": [
            [
                "fb6998e367682f07"
            ]
        ]
    },
    {
        "id": "eca9629642b7f34d",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/platform-position",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1300,
        "y": 960,
        "wires": [
            [
                "4b4fe194e5a293bb"
            ]
        ]
    },
    {
        "id": "f4db91603f2e7a56",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/platform-position/target",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1340,
        "y": 1040,
        "wires": [
            [
                "4b4fe194e5a293bb"
            ]
        ]
    },
    {
        "id": "7a9c82e54c22818d",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/temperature",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1290,
        "y": 1080,
        "wires": [
            [
                "4b4fe194e5a293bb"
            ]
        ]
    },
    {
        "id": "37abad708089168c",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/temperature/target",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1330,
        "y": 1120,
        "wires": [
            [
                "4b4fe194e5a293bb"
            ]
        ]
    },
    {
        "id": "d237f11ebed99c58",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1210,
        "y": 1160,
        "wires": [
            [
                "bb1fbba0237bde1d"
            ]
        ]
    },
    {
        "id": "c18a30c6bad0c32c",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1250,
        "y": 1200,
        "wires": [
            [
                "bb1fbba0237bde1d"
            ]
        ]
    },
    {
        "id": "5a63fc824de7f059",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/tank-switch-interval",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1330,
        "y": 1240,
        "wires": [
            [
                "bb1fbba0237bde1d"
            ]
        ]
    },
    {
        "id": "fa913d90c7e2f0fb",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/empty-duration",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1320,
        "y": 1280,
        "wires": [
            [
                "bb1fbba0237bde1d"
            ]
        ]
    },
    {
        "id": "5b48217c2ce7ec3a",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/temp-check-interval",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1330,
        "y": 1320,
        "wires": [
            [
                "bb1fbba0237bde1d"
            ]
        ]
    },
    {
        "id": "ab368e492f96a6ff",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/modbus",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1290,
        "y": 1360,
        "wires": [
            [
                "bb1fbba0237bde1d"
            ]
        ]
    },
    {
        "id": "bc35eff4cba43fc0",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/modbus/heartbeat-interval",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1370,
        "y": 1400,
        "wires": [
            [
                "bb1fbba0237bde1d"
            ]
        ]
    },
    {
        "id": "01d5195e21fa86ac",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/modbus/publish-interval",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1360,
        "y": 1440,
        "wires": [
            [
                "bb1fbba0237bde1d"
            ]
        ]
    },
    {
        "id": "9c7d7794669e9342",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/configuration/timing/modbus/read-interval",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1360,
        "y": 1480,
        "wires": [
            [
                "bb1fbba0237bde1d"
            ]
        ]
    },
    {
        "id": "30cc1f7a659edcac",
        "type": "http response",
        "z": "188f3d12c338cf2e",
        "name": "",
        "statusCode": "501",
        "headers": {},
        "x": 1860,
        "y": 320,
        "wires": []
    },
    {
        "id": "fb6998e367682f07",
        "type": "switch",
        "z": "188f3d12c338cf2e",
        "name": "MANUAL_CONTROL",
        "property": "sps_status[\"MANUAL_CONTROL\"]",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1700,
        "y": 440,
        "wires": [
            [
                "856797b0010cef5e"
            ],
            [
                "4b4fe194e5a293bb"
            ]
        ]
    },
    {
        "id": "6b59a4afdb326ba0",
        "type": "http response",
        "z": "188f3d12c338cf2e",
        "name": "",
        "statusCode": "409",
        "headers": {},
        "x": 2100,
        "y": 440,
        "wires": []
    },
    {
        "id": "856797b0010cef5e",
        "type": "template",
        "z": "188f3d12c338cf2e",
        "name": "ConflictResponse",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "System is not in Manual-Control-Mode.",
        "output": "str",
        "x": 1930,
        "y": 440,
        "wires": [
            [
                "6b59a4afdb326ba0"
            ]
        ]
    },
    {
        "id": "6663b6f250cd0867",
        "type": "template",
        "z": "188f3d12c338cf2e",
        "name": "Not Implemented",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Not supported yet.",
        "output": "str",
        "x": 1690,
        "y": 320,
        "wires": [
            [
                "30cc1f7a659edcac"
            ]
        ]
    },
    {
        "id": "3efab40e38894d68",
        "type": "http response",
        "z": "188f3d12c338cf2e",
        "name": "",
        "statusCode": "501",
        "headers": {},
        "x": 1940,
        "y": 1360,
        "wires": []
    },
    {
        "id": "bb1fbba0237bde1d",
        "type": "template",
        "z": "188f3d12c338cf2e",
        "name": "Not Implemented",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Not supported yet.",
        "output": "str",
        "x": 1770,
        "y": 1360,
        "wires": [
            [
                "3efab40e38894d68"
            ]
        ]
    },
    {
        "id": "4b4fe194e5a293bb",
        "type": "function",
        "z": "188f3d12c338cf2e",
        "name": "parse into new setpoint",
        "func": "var map_endpoint_to_response = flow.get(\"map_endpoint_to_response\");\nvar rest_put_format = flow.get(\"rest_put_format\");\n\n// parses the requested operating mode to the corresponding integer\n// setpoint is either an integer or the corresponding mode-string\nvar parseOperatingMode = function(setpoint) {\n    // possible states and its id\n    const mode_strings = {\n        \"AUTOMATIC_CYCLE\": 0,\n        \"MEASURE_TANK_A\": 1,\n        \"MEASURE_TANK_B\": 2,\n        \"DRAIN_SENSOR\": 3,\n        \"STOP\": 4\n    };\n\n    let id = mode_strings[setpoint];\n    if (isNaN(id)) {\n        id = parseInt(setpoint)\n        if (id < 0 || 4 < id || isNaN(id)) {\n            id = null;\n            msg.statusCode = 400;\n            msg.payload = \"Unknown Status: \" + setpoint + \".\";\n        }\n    }\n    return id;\n}\n\n// recursively copies the requested values from the json request into a setpoint object\n//   format: mapping of a subset of the full json-rest-structure to its key in a setpoint object\n//   payload: same subset of the json-rest-structure as \"format\" but with the requested values\n//   setpoint: setpoint object to fill\nvar addToSetpoint = function(format, payload, setpoint){\n    //check if input is null (if format and payload do not match)\n    if(format === null || payload === null){\n        msg.statusCode = 400;\n        msg.payload = \"Body of request does not fit the expected format\";\n        setpoint = {};\n    }\n    // if current subset of the json-rest-structure has more parameters\n    if (typeof format === 'object') {\n        // recursively fill each parameter\n        for (let key in format) {\n            addToSetpoint(format[key], payload[key], setpoint);\n        }\n    }\n    // if current subset is a single parameter fill in the value\n    else {\n        //special handling of auto-tide\n        if(format === \"auto_tide_a\" || \n                format === \"auto_tide_b\"){\n            let modes = global.get(\"modes\");\n            modes[format] = payload;\n        }\n        //special handling of operating_mode\n        else if (format === \"operating_mode\") {\n            let modes = global.get(\"modes\");\n            modes[format] = parseOperatingMode(payload);\n        }\n        else if(format !== -1){\n            setpoint[format] = payload;\n        }\n    }\n}\n\n\n/* return the requested setpoint with given url and payload */\nvar constructSetpoint = function (url, payload) {\n    // remove trailing slashes\n    url = url.endsWith('/') ? url.slice(0, -1) : url;\n\n    // get the path to the nested parameter\n    var path = map_endpoint_to_response[url].split(\".\");\n    // get mapping from rest-response-object to setpoint-keys\n    var format = RED.util.cloneMessage(rest_put_format);\n\n    // get only the subset of the mapping that is requested\n    for (let i in path) {\n        format = format[path[i]];\n    }\n    // so that payload and format have the same structure\n    payload = payload[path.at(-1)];\n    \n    // fill the setpoint and return it\n    var setpoint = {};\n    addToSetpoint(format, payload, setpoint);\n    return setpoint;\n}\n\n//unless something goes wrong set response status to OK\nmsg.statusCode = 200\nmsg.setpoint = constructSetpoint(msg.req.url, msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 480,
        "wires": [
            [
                "40397452dc32494b",
                "323bb0d44093cfaf",
                "38a53c72a7b05b35"
            ]
        ]
    },
    {
        "id": "40397452dc32494b",
        "type": "http response",
        "z": "188f3d12c338cf2e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2170,
        "y": 480,
        "wires": []
    },
    {
        "id": "b21514a3b309e9fa",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_out_rest_setpoint_to_dashboard",
        "mode": "link",
        "links": [
            "fdcf63cccbac0ce9"
        ],
        "x": 2325,
        "y": 480,
        "wires": []
    },
    {
        "id": "a0d21f61bdf8e8ee",
        "type": "inject",
        "z": "188f3d12c338cf2e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1190,
        "y": 40,
        "wires": [
            [
                "e07b5d16716fd3dd",
                "66f2fe53f7991b48"
            ]
        ]
    },
    {
        "id": "e07b5d16716fd3dd",
        "type": "template",
        "z": "188f3d12c338cf2e",
        "name": "rest_put_format",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"system\": {\n        \"operating_mode\": \"operating_mode\",\n        \"state\": -1,\n        \"pump\": \"PUMP\",\n        \"valves\": {\n            \"main_a\": \"V1\",\n            \"main_b\": \"V3\",\n            \"upper\": \"UPPER_MAGNETIC_VALVE\",\n            \"lower\": \"LOWER_MAGNETIC_VALVE\"\n        },\n        \"tank_a\": {\n            \"platform_position\": {\n                \"auto_tide\": \"auto_tide_a\",\n                \"target\": \"TIDE_A\"\n            },\n            \"temperature\": {\n                \"target\": \"TEMP_SETPOINT_A\"\n            }\n        },\n        \"tank_b\": {\n            \"platform_position\": {\n                \"auto_tide\": \"auto_tide_b\",\n                \"target\": \"TIDE_B\"\n            },\n            \"temperature\": {\n                \"target\": \"TEMP_SETPOINT_B\"\n            }\n        }\n    },\n    \"configuration\": {\n        \"timing\": {\n            \"tank_switch_interval\": -1,\n            \"empty_duration\": -1,\n            \"temp_check_interval\": -1\n        },\n        \"modbus\": {\n            \"heartbeat_interval\": -1,\n            \"publish_interval\": -1,\n            \"read_interval\": -1\n        }\n    }\n}",
        "output": "json",
        "x": 1360,
        "y": 40,
        "wires": [
            [
                "e35c7622c16931e2"
            ]
        ]
    },
    {
        "id": "e35c7622c16931e2",
        "type": "change",
        "z": "188f3d12c338cf2e",
        "name": "to flow.map_response_to_status",
        "rules": [
            {
                "t": "set",
                "p": "rest_put_format",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "323bb0d44093cfaf",
        "type": "debug",
        "z": "188f3d12c338cf2e",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2180,
        "y": 560,
        "wires": []
    },
    {
        "id": "ece901707e5cce1b",
        "type": "template",
        "z": "188f3d12c338cf2e",
        "name": "Not Implemented",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Not supported yet.",
        "output": "str",
        "x": 690,
        "y": 1880,
        "wires": [
            [
                "f8f0d0134a3cb955"
            ]
        ]
    },
    {
        "id": "38a53c72a7b05b35",
        "type": "switch",
        "z": "188f3d12c338cf2e",
        "name": "request is ok?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2200,
        "y": 520,
        "wires": [
            [
                "b21514a3b309e9fa"
            ]
        ]
    },
    {
        "id": "eaa19af636945029",
        "type": "switch",
        "z": "188f3d12c338cf2e",
        "name": "MANUAL_CONTROL",
        "property": "sps_status[\"MANUAL_CONTROL\"]",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1700,
        "y": 400,
        "wires": [
            [
                "95a769edfaac37c0"
            ],
            [
                "e6e65f31a1f59cd2"
            ]
        ]
    },
    {
        "id": "18ae88f0160c15b7",
        "type": "http response",
        "z": "188f3d12c338cf2e",
        "name": "",
        "statusCode": "409",
        "headers": {},
        "x": 2100,
        "y": 400,
        "wires": []
    },
    {
        "id": "e6e65f31a1f59cd2",
        "type": "template",
        "z": "188f3d12c338cf2e",
        "name": "ConflictResponse",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "System is in Manual-Control-Mode.",
        "output": "str",
        "x": 1930,
        "y": 400,
        "wires": [
            [
                "18ae88f0160c15b7"
            ]
        ]
    },
    {
        "id": "95a769edfaac37c0",
        "type": "function",
        "z": "188f3d12c338cf2e",
        "name": "parse state",
        "func": "// possible states and its id\nconst states = {\n    \"STOP\": 0,\n    \"PREP_TANK_A\" : 1,\n    \"VENT_TANK_A\": 2,\n    \"RUN_TANK_A\": 3,\n    \"STOP_TANK_A\": 4,\n    \"DRAIN_SYSTEM_A\": 5,\n    \"PREP_TANK_B\": 6,\n    \"VENT_TANK_B\": 7,\n    \"RUN_TANK_B\": 8,\n    \"STOP_TANK_B\": 9,\n    \"DRAIN_SYSTEM_B\": 10\n};\n\nlet status_setpoint = msg.payload[\"state\"];\nlet id = states[status_setpoint];\nif(isNaN(id)){\n    id = parseInt(status_setpoint)\n    if (id < 0 || 10 < id || isNaN(id)){\n        msg.statusCode = 400;\n        msg.payload = \"Unknown Status: \" + status_setpoint + \".\";\n        msg.id = -1;\n        msg.drop = 0\n        return msg;\n    }\n}\n\nmsg.statusCode = 200;\nmsg.payload = \"State set to \" + status_setpoint + \".\";\nmsg.id = id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 360,
        "wires": [
            [
                "45e1c67735c14282",
                "c8399f8543c1a778"
            ]
        ]
    },
    {
        "id": "45e1c67735c14282",
        "type": "http response",
        "z": "188f3d12c338cf2e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2170,
        "y": 360,
        "wires": []
    },
    {
        "id": "c8399f8543c1a778",
        "type": "switch",
        "z": "188f3d12c338cf2e",
        "name": "set state",
        "property": "id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "9",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "10",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 11,
        "x": 2080,
        "y": 140,
        "wires": [
            [
                "c8b5b0133f8aceda",
                "984d14f185fba203"
            ],
            [
                "665c58bb0967f62e",
                "984d14f185fba203"
            ],
            [
                "5c7d92749b63e22b",
                "984d14f185fba203"
            ],
            [
                "9f193477211885cf",
                "984d14f185fba203"
            ],
            [
                "4eaeb80e04754d90",
                "984d14f185fba203"
            ],
            [
                "5d6e9ffa65c2d433",
                "984d14f185fba203"
            ],
            [
                "4ec8d03409d90866",
                "984d14f185fba203"
            ],
            [
                "9925e568a89caf40",
                "984d14f185fba203"
            ],
            [
                "1d1814c4869e3383",
                "984d14f185fba203"
            ],
            [
                "87ae8e90b449c818",
                "984d14f185fba203"
            ],
            [
                "0eba332582454372",
                "984d14f185fba203"
            ]
        ]
    },
    {
        "id": "c8b5b0133f8aceda",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_to_stop",
        "mode": "link",
        "links": [
            "89e47bb21ad728ec"
        ],
        "x": 2245,
        "y": 40,
        "wires": []
    },
    {
        "id": "665c58bb0967f62e",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_to_prep_tank_a",
        "mode": "link",
        "links": [
            "9043510d7358b9aa"
        ],
        "x": 2285,
        "y": 60,
        "wires": []
    },
    {
        "id": "5c7d92749b63e22b",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_to_vent_tank_a",
        "mode": "link",
        "links": [
            "bc844aff20fcc420"
        ],
        "x": 2245,
        "y": 80,
        "wires": []
    },
    {
        "id": "9f193477211885cf",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_to_start_tank_a",
        "mode": "link",
        "links": [
            "a73881ed293b6a9c"
        ],
        "x": 2285,
        "y": 100,
        "wires": []
    },
    {
        "id": "4eaeb80e04754d90",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_to_stop_tank_a",
        "mode": "link",
        "links": [
            "65a8deac56c2d5b8"
        ],
        "x": 2245,
        "y": 120,
        "wires": []
    },
    {
        "id": "5d6e9ffa65c2d433",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_to_drain_system_a",
        "mode": "link",
        "links": [
            "16155fa536f4666b"
        ],
        "x": 2285,
        "y": 140,
        "wires": []
    },
    {
        "id": "4ec8d03409d90866",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_to_prep_tank_b",
        "mode": "link",
        "links": [
            "1699d5695dbb85ef"
        ],
        "x": 2245,
        "y": 160,
        "wires": []
    },
    {
        "id": "9925e568a89caf40",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_to_vent_tank_b",
        "mode": "link",
        "links": [
            "ebeb605bad12c3a4"
        ],
        "x": 2285,
        "y": 180,
        "wires": []
    },
    {
        "id": "1d1814c4869e3383",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_to_start_tank_b",
        "mode": "link",
        "links": [
            "db55c803415e7fef"
        ],
        "x": 2245,
        "y": 200,
        "wires": []
    },
    {
        "id": "87ae8e90b449c818",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_to_stop_tank_b",
        "mode": "link",
        "links": [
            "8a37df7c084d8dd2"
        ],
        "x": 2285,
        "y": 220,
        "wires": []
    },
    {
        "id": "0eba332582454372",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_to_drain_system_b",
        "mode": "link",
        "links": [
            "cb109462c6006dd5"
        ],
        "x": 2245,
        "y": 240,
        "wires": []
    },
    {
        "id": "984d14f185fba203",
        "type": "template",
        "z": "188f3d12c338cf2e",
        "name": "drop queues",
        "field": "drop",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "1",
        "output": "str",
        "x": 2270,
        "y": 280,
        "wires": [
            [
                "cd97a9d5c0d13929"
            ]
        ]
    },
    {
        "id": "cd97a9d5c0d13929",
        "type": "link out",
        "z": "188f3d12c338cf2e",
        "name": "lnk_to_drop_queues",
        "mode": "link",
        "links": [
            "82032b48128df29a"
        ],
        "x": 2385,
        "y": 280,
        "wires": []
    },
    {
        "id": "8cc6188dae98cc80",
        "type": "link in",
        "z": "188f3d12c338cf2e",
        "name": "fill_rest_response",
        "links": [
            "9c4e440634e179ee"
        ],
        "x": 185,
        "y": 200,
        "wires": [
            [
                "bbf5ad782430dec5"
            ]
        ]
    },
    {
        "id": "bbf5ad782430dec5",
        "type": "function",
        "z": "188f3d12c338cf2e",
        "name": "sensor_reading_for_current_tank",
        "func": "var rest_response = flow.get(\"rest_response\");\nconst RUN_TANK_A = 3;\nconst RUN_TANK_B = 8;\n\nlet tank;\n\nif (msg.payload[\"LAST_STEP_NUMBER\"] == RUN_TANK_A) {\n    tank = \"tank_a\";\n}\nelse if (msg.payload[\"LAST_STEP_NUMBER\"] == RUN_TANK_B) {\n    tank = \"tank_b\";\n}\nelse {\n    return;\n}\n\nlet temperature = (0.01 * msg.payload[\"RO_TEMP\"]).toFixed(2);\nlet salinity = (0.01 * msg.payload[\"RO_COND\"]).toFixed(2);\nlet oxygen = (0.01 * msg.payload[\"RO_OXYGEN\"]).toFixed(2);\nlet acidity = (0.01 * msg.payload[\"RO_PH\"]).toFixed(2);\n\nrest_response[\"system\"][tank][\"temperature\"][\"current\"] = parseFloat(temperature);\nrest_response[\"system\"][tank][\"salinity\"] = parseFloat(salinity);\nrest_response[\"system\"][tank][\"o2_concentration\"] = parseFloat(oxygen);\nrest_response[\"system\"][tank][\"acidity\"] = parseFloat(acidity);\n        \nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "1f581fe37077c867",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/salinity",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 1200,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "9ff40ee3475d88d0",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/o2-concentration",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 1240,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "4cc735ad90c377bb",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/acidity",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 1280,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "121662427c465c6c",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/salinity",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 1640,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "5b3a57f28e465de6",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/o2-concentration",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 1680,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "054663eb7f996f2f",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/acidity",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 1720,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "f8c31db1ccc4a90e",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/platform-position/auto-tide",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 960,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "30d81c0686b46eab",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/platform-position/auto-tide",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 1400,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "dc19c3a66ad38e06",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-a/platform-position/auto-tide",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1350,
        "y": 760,
        "wires": [
            [
                "4b4fe194e5a293bb"
            ]
        ]
    },
    {
        "id": "3a6099b0c8888351",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/tank-b/platform-position/auto-tide",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1350,
        "y": 1000,
        "wires": [
            [
                "4b4fe194e5a293bb"
            ]
        ]
    },
    {
        "id": "66f2fe53f7991b48",
        "type": "template",
        "z": "188f3d12c338cf2e",
        "name": "modes",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"operating_mode\": 0,\n    \"auto_tide_a\": 1,\n    \"auto_tide_b\": 1\n}",
        "output": "json",
        "x": 1330,
        "y": 80,
        "wires": [
            [
                "50e709ba8b700964"
            ]
        ]
    },
    {
        "id": "50e709ba8b700964",
        "type": "change",
        "z": "188f3d12c338cf2e",
        "name": "to global.modes",
        "rules": [
            {
                "t": "set",
                "p": "modes",
                "pt": "global",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1560,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "662c8bd4f17502f0",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/operating-mode",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 360,
        "wires": [
            [
                "df3d67198926b044"
            ]
        ]
    },
    {
        "id": "74fe3672ddfb88b6",
        "type": "http in",
        "z": "188f3d12c338cf2e",
        "name": "",
        "url": "/system/operating-mode",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1260,
        "y": 360,
        "wires": [
            [
                "4b4fe194e5a293bb"
            ]
        ]
    },
    {
        "id": "f19fd19262394aca",
        "type": "comment",
        "z": "188f3d12c338cf2e",
        "name": "if setting state directly via rest is desirable:",
        "info": "",
        "x": 1640,
        "y": 360,
        "wires": []
    }
]